{"ast":null,"code":"import _slicedToArray from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _defineProperty from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import*as React from'react';import\"../styles/training.css\";import Label from'./components/Label';/**\n * LabelLogic is a file that handles the logic behind the labels on the training screen \n */ /**\n * The constant labels consists of all possible labels with type and styling\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var labels={HomeButton:{type:\"nav\",text:\"Home\",color:\"#d500ffbb\"},NextPageButton:{type:\"nav\",text:\"Next button\",color:\"#00fffbbb\"},PreviousPageButton:{type:\"nav\",text:\"Previous button\",color:\"#b7ff00bb\"},LoginButton:{type:\"nav\",text:\"Log-in\",color:\"#ff006fbb\"},FirstThreadPageButton:{type:\"nav\",text:\"First thread page\",color:\"#f51720bb\"},AuthorUsername:{type:\"data\",text:\"Post author (PA)\",color:\"#ffadadcc\"},AuthorNrOfPosts:{type:\"data\",text:\"PA #posts\",color:\"#ffd6a5cc\"},AuthorPopularity:{type:\"data\",text:\"PA popularity\",color:\"#fdffb6cc\"},AuthorRegistrationDate:{type:\"data\",text:\"PA registration date\",color:\"#caffbfcc\"},AuthorEmail:{type:\"data\",text:\"PA email\",color:\"#9bf6ffcc\"},PostDate:{type:\"data\",text:\"Post date\",color:\"#b2f7efcc\"},PostContent:{type:\"data\",text:\"Post content\",color:\"#e4c1f9cc\"},ThreadTitle:{type:\"data\",text:\"Thread title\",color:\"#f2e2bacc\"},ThreadSection:{type:\"data\",text:\"Thread section\",color:\"#b7c6ffcc\"},ThreadAge:{type:\"data\",text:\"Thread age\",color:\"#e7f6ffcc\"},SectionTitle:{type:\"data\",text:\"Section title\",color:\"#edffeccc\"},SubsectionTitle:{type:\"data\",text:\"Subsection title\",color:\"#f6def6cc\"},UsernameInput:{type:\"input\",text:\"Username\",color:\"#f2c0d4dd\"},PasswordInput:{type:\"input\",text:\"Password\",color:\"#c0edf2dd\"},// SearchInput: {\n//     type: \"input\",\n//     text: \"Search\",\n//     color: \"#edf2c0dd\"\n// },\nSubmitLoginButton:{type:\"input\",text:\"Submit login\",color:\"#dbe9b7dd\"}};/**\n * Handles selected elements by highlighting and storing them \n */export function addElement(context,element){// Remove previous label if any\nremoveElement(context,element);// The currently highlighted elements \nvar currHighlighted=context.state.highlightedElements;// The current boolean value of being unchanged\nvar currUnchanged=context.state.unchanged;// Add border and background color to element \nelement.style.backgroundColor=labels[context.state.selectedLabel].color;element.style.border=\"thin solid rgba(0,0,0, 0.25)\";// If elements of this label have been selected before, add the new element\n// Else create new entry in the dictionary for the new element\nif(currHighlighted[context.state.selectedLabel]){currHighlighted[context.state.selectedLabel]=currHighlighted[context.state.selectedLabel].concat(element);}else{currHighlighted[context.state.selectedLabel]=[element];}// If it wasn't changed before, toggle the currUnchanged boolean for this label\nif(currUnchanged[context.state.selectedLabel]){currUnchanged[context.state.selectedLabel]=false;}// Update the state with the currently highlighted elements\ncontext.setState(function(state){return{highlightedElements:currHighlighted,unchanged:currUnchanged,dateFormats:_objectSpread(_objectSpread({},state.dateFormats),{},_defineProperty({},state.selectedLabel,state.dateFormatInput))};});}/**\n * Removes selected elements and removes highlighting \n */export function removeElement(context,element){// The currently highlighted elements \nvar currHighlighted=context.state.highlightedElements;var currIgnored=context.state.ignoredElements;// The current boolean value of being unchanged\nvar currUnchanged=context.state.unchanged;// Add border and backgroundcolor to element \nelement.style.backgroundColor=\"\";element.style.border=\"\";// If elements of this label have been selected before, remove the new element\nfor(var _i=0,_Object$entries=Object.entries(currHighlighted);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),label=_Object$entries$_i[0],elements=_Object$entries$_i[1];currHighlighted[label]=elements.filter(function(el){return el!==element;});}for(var _i2=0,_Object$entries2=Object.entries(currIgnored);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),_label=_Object$entries2$_i[0],_elements=_Object$entries2$_i[1];currIgnored[_label]=_elements.filter(function(el){return el!==element;});}// If it wasn't changed before, toggle the currUnchanged boolean for this label\nif(currUnchanged[context.state.selectedLabel]){currUnchanged[context.state.selectedLabel]=false;}// Update the state with the currently highlighted elements\ncontext.setState({highlightedElements:currHighlighted,ignoredElements:currIgnored,unchanged:currUnchanged});}/**\n * Ignores selected elements and removes highlighting \n */export function ignoreElement(context,element){// Remove previous label if any\nremoveElement(context,element);// Add dark border and backgroundcolor to element \nelement.style.backgroundColor=\"#333333\";element.style.border=\"thin solid rgba(0,0,0, 0.25)\";// Get the currently ignored items\nvar currIgnored=context.state.ignoredElements;// The current boolean value of being unchanged\nvar currUnchanged=context.state.unchanged;// If elements of this label have been selected before, add the new element\n// Else create new entry in the dictionary for the new element\nif(currIgnored[context.state.selectedLabel]){currIgnored[context.state.selectedLabel]=currIgnored[context.state.selectedLabel].concat(element);}else{currIgnored[context.state.selectedLabel]=[element];}// If it wasn't changed before, toggle the currUnchanged boolean for this label\nif(currUnchanged[context.state.selectedLabel]){currUnchanged[context.state.selectedLabel]=false;}// Update the state with the currently highlighted elements\ncontext.setState({ignoredElements:currIgnored,unchanged:currUnchanged});}/**\n * Handle viewer click\n * Depending on utility labels call different handlers\n */export function handleViewerClick(context,element){switch(context.state.utility){case\"remove\":removeElement(context,element);break;case\"ignore\":ignoreElement(context,element);break;default:addElement(context,element);}}/**\n * Handles selecting the labels \n */export function selectLabel(context,label){// If label is already selected, then deselect it\n// Else select the clicked label \nif(label===context.state.selectedLabel){context.setState({selectedLabel:\"\"});}else{context.setState({selectedLabel:label});}// Set dateformat input to the corresponding value\nconsole.log(context.state);context.setState({dateFormatInput:context.state.dateFormats[label]||\"\"});}/**\n * Handle the utility labels \n */export function selectUtilityLabel(context,label){// If label is already selected, then deselect it\n// Else select the clicked label \nif(label===context.state.utility){context.setState({utility:\"\"});}else{context.setState({utility:label});}}// Labels for the front page\nexport var frontPageLabels=[\"HomeButton\",// \"NextPageButton\",\n// \"PreviousPageButton\",\n\"LoginButton\",\"SectionTitle\",\"SubsectionTitle\"];// Labels for the login page\nexport var loginPageLabels=[\"HomeButton\",// \"NextPageButton\",\n// \"PreviousPageButton\",\n// \"LoginButton\",\n\"SectionTitle\",\"SubsectionTitle\",\"UsernameInput\",\"PasswordInput\",\"SubmitLoginButton\"];// Labels for the section page\nexport var sectionPageLabels=[\"HomeButton\",\"NextPageButton\",\"PreviousPageButton\",// \"FirstThreadPageButton\",\n// \"LoginButton\",\n\"SectionTitle\",\"SubsectionTitle\",\"ThreadTitle\"];// Labels for the subsection page\nexport var subsectionPageLabels=[\"HomeButton\",\"NextPageButton\",\"PreviousPageButton\",// \"FirstThreadPageButton\",\n// \"LoginButton\",\n\"SectionTitle\",\"SubsectionTitle\",\"ThreadTitle\"];// Labels for the thread page\nexport var threadPageLabels=[\"HomeButton\",\"NextPageButton\",\"PreviousPageButton\",\"FirstThreadPageButton\",// \"LoginButton\",\n\"AuthorUsername\",\"AuthorNrOfPosts\",\"AuthorPopularity\",\"AuthorRegistrationDate\",\"AuthorEmail\",\"PostDate\",\"PostContent\",\"ThreadTitle\",\"ThreadSection\",\"ThreadAge\"];export var labelSections=function labelSections(context){// Select labels according to selected page\nvar labelsToShow=[];switch(context.state.pageType){case\"FrontPage\":labelsToShow=frontPageLabels;break;case\"LoginPage\":labelsToShow=loginPageLabels;break;case\"SectionPage\":labelsToShow=sectionPageLabels;break;case\"SubsectionPage\":labelsToShow=subsectionPageLabels;break;case\"ThreadPage\":labelsToShow=threadPageLabels;break;default:labelsToShow=[];break;}// Sort them per section\nvar labelsPerSection=[{text:\"Navigation labels\",labels:labelsToShow.filter(function(label){return labels[label].type===\"nav\";})},{text:\"Data labels\",labels:labelsToShow.filter(function(label){return labels[label].type===\"data\";})},{text:\"Input labels\",labels:labelsToShow.filter(function(label){return labels[label].type===\"input\";})}];return labelsPerSection.map(function(section){return/*#__PURE__*/_jsx(\"div\",{children:section.labels.length>0?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"SectionTitle\",children:section.text}),/*#__PURE__*/_jsx(\"div\",{className:\"Labels\",children:section.labels.map(function(label){return/*#__PURE__*/_jsx(Label,{text:labels[label].text,color:labels[label].color,selected:label===context.state.selectedLabel,onClick:function onClick(){return selectLabel(context,label);}});})})]}):null});});};","map":{"version":3,"sources":["/home/ubuntu/THREATcrawl/threatcrawl/src/training_screen/LabelLogic.js"],"names":["React","Label","labels","HomeButton","type","text","color","NextPageButton","PreviousPageButton","LoginButton","FirstThreadPageButton","AuthorUsername","AuthorNrOfPosts","AuthorPopularity","AuthorRegistrationDate","AuthorEmail","PostDate","PostContent","ThreadTitle","ThreadSection","ThreadAge","SectionTitle","SubsectionTitle","UsernameInput","PasswordInput","SubmitLoginButton","addElement","context","element","removeElement","currHighlighted","state","highlightedElements","currUnchanged","unchanged","style","backgroundColor","selectedLabel","border","concat","setState","dateFormats","dateFormatInput","currIgnored","ignoredElements","Object","entries","label","elements","filter","el","ignoreElement","handleViewerClick","utility","selectLabel","console","log","selectUtilityLabel","frontPageLabels","loginPageLabels","sectionPageLabels","subsectionPageLabels","threadPageLabels","labelSections","labelsToShow","pageType","labelsPerSection","map","section","length"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport \"../styles/training.css\";\nimport Label from './components/Label';\n\n/**\n * LabelLogic is a file that handles the logic behind the labels on the training screen \n */\n\n/**\n * The constant labels consists of all possible labels with type and styling\n */\nexport const labels = {\n    HomeButton: {\n        type: \"nav\",\n        text: \"Home\",\n        color: \"#d500ffbb\"\n    },\n    NextPageButton: {\n        type: \"nav\",\n        text: \"Next button\",\n        color: \"#00fffbbb\"\n    },\n    PreviousPageButton: {\n        type: \"nav\",\n        text: \"Previous button\",\n        color: \"#b7ff00bb\"\n    },\n    LoginButton: {\n        type: \"nav\",\n        text: \"Log-in\",\n        color: \"#ff006fbb\"\n    },\n    FirstThreadPageButton: {\n        type: \"nav\",\n        text: \"First thread page\",\n        color: \"#f51720bb\"\n    },\n\n    AuthorUsername: {\n        type: \"data\",\n        text: \"Post author (PA)\",\n        color: \"#ffadadcc\"\n    },\n    AuthorNrOfPosts: {\n        type: \"data\",\n        text: \"PA #posts\",\n        color: \"#ffd6a5cc\"\n    },\n    AuthorPopularity: {\n        type: \"data\",\n        text: \"PA popularity\",\n        color: \"#fdffb6cc\"\n    },\n    AuthorRegistrationDate: {\n        type: \"data\",\n        text: \"PA registration date\",\n        color: \"#caffbfcc\"\n    },\n    AuthorEmail: {\n        type: \"data\",\n        text: \"PA email\",\n        color: \"#9bf6ffcc\"\n    },\n    PostDate: {\n        type: \"data\",\n        text: \"Post date\",\n        color: \"#b2f7efcc\"\n    },\n    PostContent: {\n        type: \"data\",\n        text: \"Post content\",\n        color: \"#e4c1f9cc\"\n    },\n    ThreadTitle: {\n        type: \"data\",\n        text: \"Thread title\",\n        color: \"#f2e2bacc\"\n    },\n    ThreadSection: {\n        type: \"data\",\n        text: \"Thread section\",\n        color: \"#b7c6ffcc\"\n    },\n    ThreadAge: {\n        type: \"data\",\n        text: \"Thread age\",\n        color: \"#e7f6ffcc\"\n    },\n    SectionTitle: {\n        type: \"data\",\n        text: \"Section title\",\n        color: \"#edffeccc\"\n    },\n    SubsectionTitle: {\n        type: \"data\",\n        text: \"Subsection title\",\n        color: \"#f6def6cc\"\n    },\n\n    UsernameInput: {\n        type: \"input\",\n        text: \"Username\",\n        color: \"#f2c0d4dd\"\n    },\n    PasswordInput: {\n        type: \"input\",\n        text: \"Password\",\n        color: \"#c0edf2dd\"\n    },\n    // SearchInput: {\n    //     type: \"input\",\n    //     text: \"Search\",\n    //     color: \"#edf2c0dd\"\n    // },\n    SubmitLoginButton: {\n        type: \"input\",\n        text: \"Submit login\",\n        color: \"#dbe9b7dd\"\n    },\n}\n\n/**\n * Handles selected elements by highlighting and storing them \n */\nexport function addElement(context, element) {\n    // Remove previous label if any\n    removeElement(context, element)\n\n    // The currently highlighted elements \n    var currHighlighted = context.state.highlightedElements;\n\n    // The current boolean value of being unchanged\n    var currUnchanged = context.state.unchanged;\n\n    // Add border and background color to element \n    element.style.backgroundColor = labels[context.state.selectedLabel].color;\n    element.style.border = \"thin solid rgba(0,0,0, 0.25)\";\n\n    // If elements of this label have been selected before, add the new element\n    // Else create new entry in the dictionary for the new element\n    if (currHighlighted[context.state.selectedLabel]) {\n        currHighlighted[context.state.selectedLabel] = currHighlighted[context.state.selectedLabel].concat(element)\n    } else {\n        currHighlighted[context.state.selectedLabel] = [element]\n    }\n\n    // If it wasn't changed before, toggle the currUnchanged boolean for this label\n    if (currUnchanged[context.state.selectedLabel]) {\n        currUnchanged[context.state.selectedLabel] = false\n    }\n\n    // Update the state with the currently highlighted elements\n    context.setState((state) => ({\n        highlightedElements: currHighlighted,\n        unchanged: currUnchanged,\n        dateFormats: { ...state.dateFormats, [state.selectedLabel]: state.dateFormatInput}\n    }));\n}\n\n/**\n * Removes selected elements and removes highlighting \n */\nexport function removeElement(context, element) {\n    // The currently highlighted elements \n    var currHighlighted = context.state.highlightedElements;\n    var currIgnored = context.state.ignoredElements;\n\n    // The current boolean value of being unchanged\n    var currUnchanged = context.state.unchanged;\n\n    // Add border and backgroundcolor to element \n    element.style.backgroundColor = \"\";\n    element.style.border = \"\";\n\n    // If elements of this label have been selected before, remove the new element\n    for (const [label, elements] of Object.entries(currHighlighted)) {\n        currHighlighted[label] = elements.filter((el) => { return el !== element });\n    }\n    for (const [label, elements] of Object.entries(currIgnored)) {\n        currIgnored[label] = elements.filter((el) => { return el !== element });\n    }\n\n    // If it wasn't changed before, toggle the currUnchanged boolean for this label\n    if (currUnchanged[context.state.selectedLabel]) {\n        currUnchanged[context.state.selectedLabel] = false\n    }\n\n    // Update the state with the currently highlighted elements\n    context.setState({\n        highlightedElements: currHighlighted,\n        ignoredElements: currIgnored,\n        unchanged: currUnchanged\n    });\n}\n\n/**\n * Ignores selected elements and removes highlighting \n */\n export function ignoreElement(context, element) {\n    // Remove previous label if any\n    removeElement(context, element)\n\n    // Add dark border and backgroundcolor to element \n    element.style.backgroundColor = \"#333333\";\n    element.style.border = \"thin solid rgba(0,0,0, 0.25)\";\n\n    // Get the currently ignored items\n    let currIgnored = context.state.ignoredElements;\n\n    // The current boolean value of being unchanged\n    var currUnchanged = context.state.unchanged;\n\n    // If elements of this label have been selected before, add the new element\n    // Else create new entry in the dictionary for the new element\n    if (currIgnored[context.state.selectedLabel]) {\n        currIgnored[context.state.selectedLabel] = currIgnored[context.state.selectedLabel].concat(element)\n    } else {\n        currIgnored[context.state.selectedLabel] = [element]\n    }\n\n    // If it wasn't changed before, toggle the currUnchanged boolean for this label\n    if (currUnchanged[context.state.selectedLabel]){\n        currUnchanged[context.state.selectedLabel] = false\n    }\n    // Update the state with the currently highlighted elements\n    context.setState({\n        ignoredElements: currIgnored,\n        unchanged: currUnchanged\n    });\n}\n\n/**\n * Handle viewer click\n * Depending on utility labels call different handlers\n */\nexport function handleViewerClick(context, element) {\n    switch (context.state.utility) {\n        case \"remove\": removeElement(context, element); break;\n        case \"ignore\": ignoreElement(context, element); break;\n        default: addElement(context, element);\n    }\n}\n\n/**\n * Handles selecting the labels \n */\nexport function selectLabel(context, label) {\n\n    // If label is already selected, then deselect it\n    // Else select the clicked label \n    if (label === context.state.selectedLabel) {\n        context.setState({\n            selectedLabel: \"\"\n        });\n    } else {\n        context.setState({\n            selectedLabel: label\n        });\n    }\n\n    // Set dateformat input to the corresponding value\n    console.log(context.state)\n    context.setState({\n        dateFormatInput: context.state.dateFormats[label] || \"\"\n    });\n}\n\n/**\n * Handle the utility labels \n */\nexport function selectUtilityLabel(context, label) {\n\n    // If label is already selected, then deselect it\n    // Else select the clicked label \n    if (label === context.state.utility) {\n        context.setState({\n            utility: \"\"\n        })\n    } else {\n        context.setState({\n            utility: label\n        })\n    }\n}\n\n// Labels for the front page\nexport const frontPageLabels = [\n    \"HomeButton\",\n    // \"NextPageButton\",\n    // \"PreviousPageButton\",\n    \"LoginButton\",\n    \"SectionTitle\",\n    \"SubsectionTitle\",\n]\n\n// Labels for the login page\nexport const loginPageLabels = [\n    \"HomeButton\",\n    // \"NextPageButton\",\n    // \"PreviousPageButton\",\n    // \"LoginButton\",\n    \"SectionTitle\",\n    \"SubsectionTitle\",\n    \"UsernameInput\",\n    \"PasswordInput\",\n    \"SubmitLoginButton\",\n]\n\n// Labels for the section page\nexport const sectionPageLabels = [\n    \"HomeButton\",\n    \"NextPageButton\",\n    \"PreviousPageButton\",\n    // \"FirstThreadPageButton\",\n    // \"LoginButton\",\n    \"SectionTitle\",\n    \"SubsectionTitle\",\n    \"ThreadTitle\",\n]\n\n// Labels for the subsection page\nexport const subsectionPageLabels = [\n    \"HomeButton\",\n    \"NextPageButton\",\n    \"PreviousPageButton\",\n    // \"FirstThreadPageButton\",\n    // \"LoginButton\",\n    \"SectionTitle\",\n    \"SubsectionTitle\",\n    \"ThreadTitle\",\n]\n\n// Labels for the thread page\nexport const threadPageLabels = [\n    \"HomeButton\",\n    \"NextPageButton\",\n    \"PreviousPageButton\",\n    \"FirstThreadPageButton\",\n    // \"LoginButton\",\n    \"AuthorUsername\",\n    \"AuthorNrOfPosts\",\n    \"AuthorPopularity\",\n    \"AuthorRegistrationDate\",\n    \"AuthorEmail\",\n    \"PostDate\",\n    \"PostContent\",\n    \"ThreadTitle\",\n    \"ThreadSection\",\n    \"ThreadAge\",\n]\n\nexport const labelSections = (context) => {\n\n    // Select labels according to selected page\n    let labelsToShow = [];\n    switch (context.state.pageType) {\n        case \"FrontPage\": labelsToShow = frontPageLabels; break;\n        case \"LoginPage\": labelsToShow = loginPageLabels; break;\n        case \"SectionPage\": labelsToShow = sectionPageLabels; break;\n        case \"SubsectionPage\": labelsToShow = subsectionPageLabels; break;\n        case \"ThreadPage\": labelsToShow = threadPageLabels; break;\n        default: labelsToShow = []; break;\n    }\n\n    // Sort them per section\n    const labelsPerSection = [\n        {\n            text: \"Navigation labels\",\n            labels: labelsToShow.filter((label) => {\n                return labels[label].type === \"nav\";\n            })\n        },\n        {\n            text: \"Data labels\",\n            labels: labelsToShow.filter((label) => {\n                return labels[label].type === \"data\";\n            })\n        },\n        {\n            text: \"Input labels\",\n            labels: labelsToShow.filter((label) => {\n                return labels[label].type === \"input\";\n            })\n        }\n    ]\n\n    return (\n        labelsPerSection.map(section =>\n            <div>\n                {section.labels.length > 0 ?\n                    <div>\n                        {/* Section title for navigation elements */}\n                        <div className=\"SectionTitle\">\n                            {section.text}\n                        </div>\n\n                        {/* Labels for navigation elements */}\n                        < div className=\"Labels\" >\n                            {\n                                section.labels.map((label) =>\n                                    <Label\n                                        text={labels[label].text}\n                                        color={labels[label].color}\n                                        selected={label === context.state.selectedLabel}\n                                        onClick={() => selectLabel(context, label)}\n                                    />\n                                )\n                            }\n                        </div>\n                    </div >\n                    :\n                    null}\n            </div>\n        )\n    )\n}"]},"metadata":{},"sourceType":"module"}