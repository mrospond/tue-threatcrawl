{"ast":null,"code":"import _defineProperty from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _classCallCheck from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import{FormControlLabel,FormGroup,InputAdornment,Switch,TextField,Typography}from'@material-ui/core';import*as React from'react';import{Component}from'react';import\"../styles/start.css\";/**\n * Preferences is a class for the tab preferences. \n * In this tab, several options can be toggled. \n * \n * skipTraining defines if the training session should be skipped\n * sslCheck defines if it should do the SSL check or ignore it\n * defaultSchedule defines if the default schedule should be used instead of a custom schedule\n * downloadTimeout defines the timeout that is used for downloading webpages\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Preferences=/*#__PURE__*/function(_Component){_inherits(Preferences,_Component);var _super=_createSuper(Preferences);function Preferences(props){var _this;_classCallCheck(this,Preferences);_this=_super.call(this,props);_this.state={preferences:{skipTraining:false,sslCheck:false,defaultSchedule:false,downloadImages:true,downloadTimeout:60,pageLoadingTimeout:60}};// Bind functions to this context\n_this.handleInputValues=_this.handleInputValues.bind(_assertThisInitialized(_this));_this.togglePreference=_this.togglePreference.bind(_assertThisInitialized(_this));_this.handleSavingConfiguration=_this.handleSavingConfiguration.bind(_assertThisInitialized(_this));return _this;}_createClass(Preferences,[{key:\"componentDidMount\",value:function componentDidMount(){if(this.props.preferences){this.setState({preferences:this.props.preferences});}}/**\n     * Handle input value changes \n     * \n     * @param {*} event is the event for the new value \n     * @param {*} element is the name of the input that has changed\n     */},{key:\"handleInputValues\",value:function handleInputValues(event,element){// get new value \nvar newValue=event.target.value;// If the value is larger than 0, change input according to what is typed \nif(newValue.length>=0){// Change the state of the element according to new value \nthis.setState(function(state){return{preferences:_objectSpread(_objectSpread({},state.preferences),{},_defineProperty({},element,newValue))};});}}/**\n     * Toggle preference\n     * \n     * @param {*} event contains the preference that should be toggled\n     */},{key:\"togglePreference\",value:function togglePreference(event){this.setState({preferences:_objectSpread(_objectSpread({},this.state.preferences),{},_defineProperty({},event.target.name,event.target.checked))});}/**\n     * Saves the current preferences to TabScreen\n     */},{key:\"handleSavingConfiguration\",value:function handleSavingConfiguration(){this.props.saveConfiguration(this.state.preferences);}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/_jsx(\"div\",{className:\"PreferencesTab\",children:/*#__PURE__*/_jsxs(FormGroup,{children:[/*#__PURE__*/_jsx(TextField,{id:\"outlined-number\",label:\"Timeout for downloads\",type:\"number\",placeholder:60,variant:\"outlined\",size:\"small\",InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:\"in seconds\"})},value:this.state.preferences.downloadTimeout,onChange:function onChange(event){_this2.handleInputValues(event,'downloadTimeout');},onBlur:this.handleSavingConfiguration}),/*#__PURE__*/_jsx(TextField,{id:\"outlined-number\",label:\"Timeout for page loading\",type:\"number\",placeholder:60,variant:\"outlined\",size:\"small\",InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:\"in seconds\"})},value:this.state.preferences.pageLoadingTimeout,onChange:function onChange(event){_this2.handleInputValues(event,'pageLoadingTimeout');},onBlur:this.handleSavingConfiguration}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Switch,{color:\"primary\",name:\"skipTraining\",checked:this.state.preferences.skipTraining,onChange:this.togglePreference,onBlur:this.handleSavingConfiguration}),label:/*#__PURE__*/_jsx(Typography,{children:\"Skip training session\"})}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Switch,{color:\"primary\",name:\"downloadImages\",checked:this.state.preferences.downloadImages,onChange:this.togglePreference,onBlur:this.handleSavingConfiguration}),label:/*#__PURE__*/_jsx(Typography,{children:\"Download images\"})}),/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Switch,{color:\"primary\",name:\"sslCheck\",checked:this.state.preferences.sslCheck,onChange:this.togglePreference,onBlur:this.handleSavingConfiguration}),label:/*#__PURE__*/_jsx(Typography,{children:\"SSL certificate check\"})}),/*#__PURE__*/_jsx(FormControlLabel,{value:\"defaultSchedule\",control:/*#__PURE__*/_jsx(Switch,{color:\"primary\",name:\"defaultSchedule\",checked:this.state.preferences.defaultSchedule,onChange:this.togglePreference,onBlur:this.handleSavingConfiguration}),label:/*#__PURE__*/_jsx(Typography,{children:\"Use default schedule\"})})]})});}}]);return Preferences;}(Component);export default Preferences;","map":{"version":3,"sources":["/home/ubuntu/THREATcrawl/threatcrawl/src/start_screen/Preferences.js"],"names":["FormControlLabel","FormGroup","InputAdornment","Switch","TextField","Typography","React","Component","Preferences","props","state","preferences","skipTraining","sslCheck","defaultSchedule","downloadImages","downloadTimeout","pageLoadingTimeout","handleInputValues","bind","togglePreference","handleSavingConfiguration","setState","event","element","newValue","target","value","length","name","checked","saveConfiguration","endAdornment"],"mappings":"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","sourcesContent":["import { FormControlLabel, FormGroup, InputAdornment, Switch, TextField, Typography } from '@material-ui/core';\nimport * as React from 'react';\nimport { Component } from 'react';\n\nimport \"../styles/start.css\";\n\n/**\n * Preferences is a class for the tab preferences. \n * In this tab, several options can be toggled. \n * \n * skipTraining defines if the training session should be skipped\n * sslCheck defines if it should do the SSL check or ignore it\n * defaultSchedule defines if the default schedule should be used instead of a custom schedule\n * downloadTimeout defines the timeout that is used for downloading webpages\n */\nclass Preferences extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            preferences: {\n                skipTraining: false,\n                sslCheck: false,\n                defaultSchedule: false,\n                downloadImages: true,\n                downloadTimeout: 60,\n                pageLoadingTimeout: 60\n            }\n        }\n\n        // Bind functions to this context\n        this.handleInputValues = this.handleInputValues.bind(this);\n        this.togglePreference = this.togglePreference.bind(this);\n        this.handleSavingConfiguration = this.handleSavingConfiguration.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.preferences) {\n            this.setState({ preferences: this.props.preferences });\n        }\n    }\n\n    /**\n     * Handle input value changes \n     * \n     * @param {*} event is the event for the new value \n     * @param {*} element is the name of the input that has changed\n     */\n    handleInputValues(event, element) {\n        // get new value \n        const newValue = event.target.value;\n\n        // If the value is larger than 0, change input according to what is typed \n        if (newValue.length >= 0) {\n\n            // Change the state of the element according to new value \n            this.setState((state) => ({\n                preferences: {\n                    ...state.preferences,\n                    [element]: newValue\n                }\n            }));\n        }\n    }\n\n    /**\n     * Toggle preference\n     * \n     * @param {*} event contains the preference that should be toggled\n     */\n    togglePreference(event) {\n        this.setState({\n            preferences: {\n                ...this.state.preferences, \n                [event.target.name]: event.target.checked\n            }\n        })\n    }\n\n    /**\n     * Saves the current preferences to TabScreen\n     */\n    handleSavingConfiguration() {\n        this.props.saveConfiguration(this.state.preferences);\n    }\n\n    render() {\n        return (\n            <div className=\"PreferencesTab\">\n                <FormGroup>\n                    {/* Input for download timeout */}\n                    <TextField\n                        id=\"outlined-number\"\n                        label=\"Timeout for downloads\"\n                        type=\"number\"\n                        placeholder={60}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        InputProps={{\n                            endAdornment:\n                                <InputAdornment position=\"end\">\n                                    in seconds\n                                </InputAdornment>\n                        }}\n                        value={this.state.preferences.downloadTimeout}\n                        onChange={(event) => {\n                            this.handleInputValues(event, 'downloadTimeout');\n                        }}\n                        onBlur={this.handleSavingConfiguration}\n                    />\n\n                    {/* Input for page load timeout */}\n                    <TextField\n                        id=\"outlined-number\"\n                        label=\"Timeout for page loading\"\n                        type=\"number\"\n                        placeholder={60}\n                        variant=\"outlined\"\n                        size=\"small\"\n                        InputProps={{\n                            endAdornment:\n                                <InputAdornment position=\"end\">\n                                    in seconds\n                                </InputAdornment>\n                        }}\n                        value={this.state.preferences.pageLoadingTimeout}\n                        onChange={(event) => {\n                            this.handleInputValues(event, 'pageLoadingTimeout');\n                        }}\n                        onBlur={this.handleSavingConfiguration}\n                    />\n\n                    {/* Switch to toggle training */}\n                    <FormControlLabel\n                        control={<Switch color=\"primary\" \n                                    name=\"skipTraining\"\n                                    checked={this.state.preferences.skipTraining} \n                                    onChange={this.togglePreference} \n                                    onBlur={this.handleSavingConfiguration}\n                                />}\n                        label={<Typography>Skip training session</Typography>}\n                    />\n\n                    {/* Switch to toggle image download */}\n                    <FormControlLabel\n                        control={<Switch color=\"primary\" \n                                    name=\"downloadImages\"\n                                    checked={this.state.preferences.downloadImages} \n                                    onChange={this.togglePreference} \n                                    onBlur={this.handleSavingConfiguration}\n                                />}\n                        label={<Typography>Download images</Typography>}\n                    />\n\n                    {/* Switch to toggle SSL check */}\n                    <FormControlLabel\n                        control={<Switch color=\"primary\" \n                                    name=\"sslCheck\"\n                                    checked={this.state.preferences.sslCheck} \n                                    onChange={this.togglePreference} \n                                    onBlur={this.handleSavingConfiguration}\n                                />}\n                        label={<Typography>SSL certificate check</Typography>}\n                    />\n\n                    {/* Switch to toggle Default schedule */}\n                    <FormControlLabel\n                        value=\"defaultSchedule\"\n                        control={<Switch color=\"primary\" \n                                    name=\"defaultSchedule\"\n                                    checked={this.state.preferences.defaultSchedule} \n                                    onChange={this.togglePreference} \n                                    onBlur={this.handleSavingConfiguration}\n                                />}\n                        label={<Typography>Use default schedule</Typography>}\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n}\n\nexport default Preferences;"]},"metadata":{},"sourceType":"module"}