{"ast":null,"code":"import _defineProperty from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _classCallCheck from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import*as React from'react';import{Tabs,Tab,Snackbar}from'@material-ui/core';import InputConfiguration from'./InputConfiguration';import Keywords from'./Keywords';import Schedule from'./Schedule';import Confirmation from'./components/Confirmation';import{Component}from'react';import Alert from'@material-ui/lab/Alert';import moment from'moment';import aesjs from'aes-js';import{v4 as uuidv4}from'uuid';import{defaultValues,defaultSchedule}from'./DefaultValues';import\"../styles/start.css\";import Preferences from'./Preferences';// Set a key for the encryption of usernames and passwords (created from random numbers, should probably be stored somewhere else)\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var key=[22,23,12,4,1,28,15,23,19,15,19,19,2,6,7,18,31,9,3,31,28,27,19,1,25,19,26,11,8,18,5,24];var electron=window.require('electron');var ipcRenderer=electron.ipcRenderer;var remote=electron.remote;/**\n * TabScreen is the class with the main functionality for the start screen. \n * \n * In this screen, the user has the possibility to visit three tabs. \n * These tabs can that together form the full input configuration for a session. \n * \n * The tabs are: \n * configuration: for multiple (random) necessary input values \n * keywords: for input of relevant and blacklisted keywords \n * schedule: for the input of the schedule with workdays and breaks \n */var TabScreen=/*#__PURE__*/function(_Component){_inherits(TabScreen,_Component);var _super=_createSuper(TabScreen);function TabScreen(props){var _this;_classCallCheck(this,TabScreen);_this=_super.call(this,props);_this.handleTabChange=function(event,newValue){_this.setState({selectedTab:newValue});};_this.handlePopupClose=function(event,reason){// If the user clicked away don't close the popup\nif(reason==='clickaway'){return;}// Otherwise do close the popup \n_this.setState({popupOpen:false});};_this.state={popupOpen:false,selectedTab:0,preferences:{skipTraining:false,sslCheck:false,defaultSchedule:false,downloadImages:true,downloadTimeout:60,pageLoadingTimeout:60},configuration:{},keywords:{relevantKeywords:[],blacklistedKeywords:[]},schedule:[],unchanged:false};// Bind functions to this context\n_this.saveConfiguration=_this.saveConfiguration.bind(_assertThisInitialized(_this));_this.keepConfiguration=_this.keepConfiguration.bind(_assertThisInitialized(_this));_this.sendConfiguration=_this.sendConfiguration.bind(_assertThisInitialized(_this));return _this;}_createClass(TabScreen,[{key:\"componentWillMount\",value:function componentWillMount(){// Check if a configuration is set\nvar selectedConfig=remote.getGlobal('selectedConfiguration');// If there is a config, save it in the state\nif(selectedConfig){// Decrypt username and password\nvar usernameHex=selectedConfig.configuration.username;var passwordHex=selectedConfig.configuration.password;// Generate decryption object\nvar aesCtr=new aesjs.ModeOfOperation.ctr(key,new aesjs.Counter(4));// Decrypt\nvar username=this.decrypt(usernameHex,aesCtr);var password=this.decrypt(passwordHex,aesCtr);// Overwrite the config values\nvar configuration=_objectSpread(_objectSpread({},selectedConfig.configuration),{},{username:username,password:password});// Put the schedule in the correct structure\nvar schedule=this.adjustSchedule(selectedConfig);// Update the state\nthis.setState({preferences:selectedConfig.preferences,configuration:configuration,keywords:selectedConfig.keywords,schedule:schedule,unchanged:true});}}},{key:\"adjustSchedule\",value:function adjustSchedule(selectedConfig){// Adjust schedule config to work with the schedule tab\nvar schedule=[];var dayCount=0;// For each day, add the workdays and breaks\nfor(var _i=0,_Object$values=Object.values(selectedConfig.schedule);_i<_Object$values.length;_i++){var intervals=_Object$values[_i];// Add workdays\nfor(var i=0;i<intervals.workday.length;i+=2){// Get the start and end moments\nvar day=moment().startOf('week').add(dayCount,'days');var starttime=intervals.workday[i].split(':');var endtime=intervals.workday[i+1].split(':');var start=moment(day).hour(starttime[0]).minute(starttime[1]).second(0);var end=moment(day).hour(endtime[0]).minute(endtime[1]).second(0);// Push it to the list\nschedule.push({start:start,end:end,value:\"Workday\",id:uuidv4()});}// Add breaks\nfor(var _i2=0;_i2<intervals.breaks.length;_i2+=2){// Get start and end moments\nvar _day=moment().startOf('week').add(dayCount,'days');var _starttime=intervals.breaks[_i2].split(':');var _endtime=intervals.breaks[_i2+1].split(':');var _start=moment(_day).hour(_starttime[0]).minute(_starttime[1]).second(0);var _end=moment(_day).hour(_endtime[0]).minute(_endtime[1]).second(0);// Push it to the list\nschedule.push({start:_start,end:_end,value:\"Break\",id:uuidv4()});}// Remember amount of days added\ndayCount+=1;}return schedule;}},{key:\"encrypt\",value:function encrypt(text,aesCtr){// Encrypt the credentials with AES\nvar textBytes=aesjs.utils.utf8.toBytes(text);var textEncrypted=aesCtr.encrypt(textBytes);var textHex=aesjs.utils.hex.fromBytes(textEncrypted);return textHex;}},{key:\"decrypt\",value:function decrypt(textHex,aesCtr){// Decrypt the credentials with AES\nvar textEncrypted=aesjs.utils.hex.toBytes(textHex);var textDecrypted=aesCtr.decrypt(textEncrypted);var text=aesjs.utils.utf8.fromBytes(textDecrypted);return text;}/**\n     * handle changing from one tab to another and changing the selected tab. \n     */},{key:\"saveConfiguration\",value:/**\n     * save the configuration to the state \n     */function saveConfiguration(tab,data){var _this$setState;this.setState((_this$setState={},_defineProperty(_this$setState,tab,data),_defineProperty(_this$setState,\"unchanged\",false),_this$setState));}// Keep selected configuration and start crawler\n},{key:\"keepConfiguration\",value:function keepConfiguration(){// Get the selected config and needed values\nvar config=remote.getGlobal('selectedConfiguration');var configuration_id=Buffer.from(config._id.id).toString('hex');;var username=this.state.configuration.username;var password=this.state.configuration.password;// Start the crawler and close the window\nipcRenderer.send('start-crawler',{configuration_id:configuration_id,username:username,password:password});remote.getCurrentWindow().close();}// Send configuration\n},{key:\"sendConfiguration\",value:function sendConfiguration(){// Check if mandatory fields have been filled in\nif(!this.state.configuration.torPath||!this.state.configuration.frontPageURL||!this.state.configuration.sectionPageURL||!this.state.configuration.threadPageURL||!this.state.configuration.loginPageURL){// Create a popup to notify the user\nthis.setState({popupOpen:true});return;}// Preferences is gotten from this.state.preferences\nvar preferences=this.state.preferences;// Check if either a schedule has been filled in or the default schedule should be used\nif(!this.state.preferences.defaultSchedule){if(this.state.schedule.length===0){// Ask the user if default schedule is preferred\nvar clicked=remote.dialog.showMessageBoxSync(remote.getCurrentWindow(),{message:\"No schedule is created, do you want to use the default schedule?\",type:\"question\",buttons:[\"Yes\",\"No\"],defaultId:0,cancelId:1});// Set the boolean accordingly\nif(clicked===0){this.setState({preferences:_objectSpread(_objectSpread({},this.state.preferences),{},{defaultSchedule:true})});preferences.defaultSchedule=true;}else{return;}}}// Configuration is gotten from this.state.configuration\n// To allow default values, the values are retrieved separately\nvar configuration={\"frontPageURL\":this.state.configuration.frontPageURL,\"sectionPageURL\":this.state.configuration.sectionPageURL,\"subsectionPageURL\":this.state.configuration.subsectionPageURL||\"\",\"threadPageURL\":this.state.configuration.threadPageURL,\"loginPageURL\":this.state.configuration.loginPageURL,\"username\":this.state.configuration.username||\"\",\"password\":this.state.configuration.password||\"\",\"maxThreadAge\":this.state.configuration.maxThreadAge||defaultValues.maxThreadAge,\"maxThreadLength\":this.state.configuration.maxThreadLength||defaultValues.maxThreadLength,\"timezone\":this.state.configuration.timezone||defaultValues.timezone,\"varStartTimeWorkday\":this.state.configuration.varStartTimeWorkday||defaultValues.varStartTimeWorkday,\"varEndTimeWorkday\":this.state.configuration.varEndTimeWorkday||defaultValues.varEndTimeWorkday,\"varStartTimeBreaks\":this.state.configuration.varStartTimeBreaks||defaultValues.varStartTimeBreaks,\"varEndTimeBreaks\":this.state.configuration.varEndTimeBreaks||defaultValues.varEndTimeBreaks,\"linkFollowPolicy\":this.state.configuration.linkFollowPolicy||defaultValues.linkFollowPolicy,\"readingSpeedRangeLower\":this.state.configuration.readingSpeedRangeLower||defaultValues.readingSpeedRangeLower,\"readingSpeedRangeUpper\":this.state.configuration.readingSpeedRangeUpper||defaultValues.readingSpeedRangeUpper,\"maxInterruptionDuration\":this.state.configuration.maxInterruptionDuration||defaultValues.maxInterruptionDuration,\"minInterruptionDuration\":this.state.configuration.minInterruptionDuration||defaultValues.minInterruptionDuration,\"interruptionInterval\":this.state.configuration.interruptionInterval||defaultValues.interruptionInterval,\"varInterruptionInterval\":this.state.configuration.varInterruptionInterval||defaultValues.varInterruptionInterval,\"torPath\":this.state.configuration.torPath};// this.state.keywords is always up-to-date (by design), so it can be used directly\nvar keywords=this.state.keywords;// The schedule should be parsed to send the needed data\n// First add the weekdays for translating from int to weekday\nvar weekdays={1:\"monday\",2:\"tuesday\",3:\"wednesday\",4:\"thursday\",5:\"friday\",6:\"saturday\",0:\"sunday\"};// Create schedule object\nvar schedule={monday:{workday:[],breaks:[]},tuesday:{workday:[],breaks:[]},wednesday:{workday:[],breaks:[]},thursday:{workday:[],breaks:[]},friday:{workday:[],breaks:[]},saturday:{workday:[],breaks:[]},sunday:{workday:[],breaks:[]}};// Take default schedule if no schedule is created\nif(this.state.preferences.defaultSchedule){schedule=defaultSchedule;}else{// Add all events planned\nthis.state.schedule.forEach(function(event){// Get the start and end moments of the event\nvar start=event.start._d;var end=event.end._d;// Get the day of the event\nvar day=weekdays[start.getDay()];// Retrieve the time from the moment objects\nvar startTime=start.getHours()+\":\"+start.getMinutes();var endTime=end.getHours()+\":\"+end.getMinutes();// Filter type of event\nif(event.value===\"Workday\"){schedule[day].workday=[startTime,endTime];}else if(event.value===\"Break\"){schedule[day].breaks=schedule[day].breaks.concat([startTime,endTime]);}else{console.error(\"Invalid event: \"+event);}});}var data={preferences:preferences,configuration:configuration,keywords:keywords,schedule:schedule};// The username and password are sensitive data, so they must not be stored in plaintext\nvar username=data.configuration.username;var password=data.configuration.password;// Encrypt the credentials with AES\nvar aesCtr=new aesjs.ModeOfOperation.ctr(key,new aesjs.Counter(4));var usernameHex=this.encrypt(username,aesCtr);var passwordHex=this.encrypt(password,aesCtr);data.configuration.username=usernameHex;data.configuration.password=passwordHex;// Send the configuration to be saved by the database\nipcRenderer.send('save-configuration',data);ipcRenderer.on('save-configuration',function(event,configuration_id){// Start the crawler and close the window\nipcRenderer.send('start-crawler',{configuration_id:configuration_id,username:username,password:password});remote.getCurrentWindow().close();});}},{key:\"render\",value:function render(){var _this2=this;// Select the correct tab to show\nvar tab=null;switch(this.state.selectedTab){case 0:tab=/*#__PURE__*/_jsx(Preferences,{preferences:this.state.preferences,saveConfiguration:function saveConfiguration(data){_this2.saveConfiguration(\"preferences\",data);}});break;case 1:tab=/*#__PURE__*/_jsx(InputConfiguration,{configuration:this.state.configuration,saveConfiguration:function saveConfiguration(data){_this2.saveConfiguration(\"configuration\",data);}});break;case 2:tab=/*#__PURE__*/_jsx(Keywords,{keywords:this.state.keywords,saveConfiguration:function saveConfiguration(data){_this2.saveConfiguration(\"keywords\",data);}});break;case 3:tab=/*#__PURE__*/_jsx(Schedule,{schedule:this.state.schedule,saveConfiguration:function saveConfiguration(data){_this2.saveConfiguration(\"schedule\",data);}});break;default:break;}return/*#__PURE__*/ (// Show the tab screen \n_jsxs(\"div\",{className:\"Tabs\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"TabScreen\",children:/*#__PURE__*/_jsxs(Tabs,{value:this.state.selectedTab,onChange:this.handleTabChange,indicatorColor:\"primary\",textColor:\"primary\",centered:true,children:[/*#__PURE__*/_jsx(Tab,{className:\"Tab\",label:\"Preferences\"}),/*#__PURE__*/_jsx(Tab,{className:\"Tab\",label:\"Configuration\"}),/*#__PURE__*/_jsx(Tab,{className:\"Tab\",label:\"Keywords\"}),/*#__PURE__*/_jsx(Tab,{className:\"Tab\",label:\"Schedule\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"TabContent\",children:tab}),/*#__PURE__*/_jsx(Confirmation,{sendConfiguration:this.state.unchanged?this.keepConfiguration:this.sendConfiguration}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Snackbar,{open:this.state.popupOpen,autoHideDuration:6000,anchorOrigin:{vertical:'top',horizontal:'center'},onClose:this.handlePopupClose,children:/*#__PURE__*/_jsx(Alert,{onClose:this.handlePopupClose,severity:\"error\",children:\"Please enter all required fields!\"})})})]}));}}]);return TabScreen;}(Component);export default TabScreen;","map":{"version":3,"sources":["/home/ubuntu/THREATcrawl/threatcrawl/src/start_screen/TabScreen.js"],"names":["React","Tabs","Tab","Snackbar","InputConfiguration","Keywords","Schedule","Confirmation","Component","Alert","moment","aesjs","v4","uuidv4","defaultValues","defaultSchedule","Preferences","key","electron","window","require","ipcRenderer","remote","TabScreen","props","handleTabChange","event","newValue","setState","selectedTab","handlePopupClose","reason","popupOpen","state","preferences","skipTraining","sslCheck","downloadImages","downloadTimeout","pageLoadingTimeout","configuration","keywords","relevantKeywords","blacklistedKeywords","schedule","unchanged","saveConfiguration","bind","keepConfiguration","sendConfiguration","selectedConfig","getGlobal","usernameHex","username","passwordHex","password","aesCtr","ModeOfOperation","ctr","Counter","decrypt","adjustSchedule","dayCount","Object","values","intervals","i","workday","length","day","startOf","add","starttime","split","endtime","start","hour","minute","second","end","push","value","id","breaks","text","textBytes","utils","utf8","toBytes","textEncrypted","encrypt","textHex","hex","fromBytes","textDecrypted","tab","data","config","configuration_id","Buffer","from","_id","toString","send","getCurrentWindow","close","torPath","frontPageURL","sectionPageURL","threadPageURL","loginPageURL","clicked","dialog","showMessageBoxSync","message","type","buttons","defaultId","cancelId","subsectionPageURL","maxThreadAge","maxThreadLength","timezone","varStartTimeWorkday","varEndTimeWorkday","varStartTimeBreaks","varEndTimeBreaks","linkFollowPolicy","readingSpeedRangeLower","readingSpeedRangeUpper","maxInterruptionDuration","minInterruptionDuration","interruptionInterval","varInterruptionInterval","weekdays","monday","tuesday","wednesday","thursday","friday","saturday","sunday","forEach","_d","getDay","startTime","getHours","getMinutes","endTime","concat","console","error","on","vertical","horizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Tabs, Tab, Snackbar } from '@material-ui/core';\nimport InputConfiguration from './InputConfiguration';\nimport Keywords from './Keywords';\nimport Schedule from './Schedule';\nimport Confirmation from './components/Confirmation';\nimport { Component } from 'react';\nimport Alert from '@material-ui/lab/Alert';\nimport moment from 'moment';\nimport aesjs from 'aes-js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { defaultValues, defaultSchedule } from './DefaultValues';\n\nimport \"../styles/start.css\";\nimport Preferences from './Preferences';\n\n// Set a key for the encryption of usernames and passwords (created from random numbers, should probably be stored somewhere else)\nconst key = [22, 23, 12, 4, 1, 28, 15, 23, 19, 15, 19, 19, 2, 6, 7, 18, 31, 9, 3, 31, 28, 27, 19, 1, 25, 19, 26, 11, 8, 18, 5, 24];\n\nconst electron = window.require('electron');\nconst ipcRenderer = electron.ipcRenderer;\nconst remote = electron.remote;\n\n/**\n * TabScreen is the class with the main functionality for the start screen. \n * \n * In this screen, the user has the possibility to visit three tabs. \n * These tabs can that together form the full input configuration for a session. \n * \n * The tabs are: \n * configuration: for multiple (random) necessary input values \n * keywords: for input of relevant and blacklisted keywords \n * schedule: for the input of the schedule with workdays and breaks \n */\nclass TabScreen extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            popupOpen: false,\n            selectedTab: 0,\n            preferences: {\n                skipTraining: false,\n                sslCheck: false,\n                defaultSchedule: false,\n                downloadImages: true,\n                downloadTimeout: 60,\n                pageLoadingTimeout: 60\n            },\n            configuration: {},\n            keywords: {\n                relevantKeywords: [],\n                blacklistedKeywords: []\n            },\n            schedule: [],\n            unchanged: false\n        }\n\n        // Bind functions to this context\n        this.saveConfiguration = this.saveConfiguration.bind(this);\n        this.keepConfiguration = this.keepConfiguration.bind(this);\n        this.sendConfiguration = this.sendConfiguration.bind(this);\n    }\n\n    componentWillMount() {\n        // Check if a configuration is set\n        const selectedConfig = remote.getGlobal('selectedConfiguration');\n\n        // If there is a config, save it in the state\n        if (selectedConfig) {\n            // Decrypt username and password\n            const usernameHex = selectedConfig.configuration.username;\n            const passwordHex = selectedConfig.configuration.password;\n\n            // Generate decryption object\n            var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(4));\n\n            // Decrypt\n            var username = this.decrypt(usernameHex, aesCtr);\n            var password = this.decrypt(passwordHex, aesCtr);\n\n            // Overwrite the config values\n            const configuration = { ...selectedConfig.configuration, username, password }\n\n            // Put the schedule in the correct structure\n            var schedule = this.adjustSchedule(selectedConfig);\n\n            // Update the state\n            this.setState({\n                preferences: selectedConfig.preferences,\n                configuration: configuration,\n                keywords: selectedConfig.keywords,\n                schedule: schedule,\n                unchanged: true\n            });\n        }\n    }\n\n    adjustSchedule(selectedConfig) {\n        // Adjust schedule config to work with the schedule tab\n        let schedule = [];\n        let dayCount = 0\n\n        // For each day, add the workdays and breaks\n        for (const intervals of Object.values(selectedConfig.schedule)) {\n            // Add workdays\n            for (let i = 0; i < intervals.workday.length; i += 2) {\n                // Get the start and end moments\n                let day = moment().startOf('week').add(dayCount, 'days');\n                let starttime = intervals.workday[i].split(':');\n                let endtime = intervals.workday[i + 1].split(':');\n                let start = moment(day)\n                    .hour(starttime[0])\n                    .minute(starttime[1])\n                    .second(0);\n                let end = moment(day)\n                    .hour(endtime[0])\n                    .minute(endtime[1])\n                    .second(0);\n                // Push it to the list\n                schedule.push({ start, end, value: \"Workday\", id: uuidv4() })\n            }\n            // Add breaks\n            for (let i = 0; i < intervals.breaks.length; i += 2) {\n                // Get start and end moments\n                let day = moment().startOf('week').add(dayCount, 'days');\n                let starttime = intervals.breaks[i].split(':');\n                let endtime = intervals.breaks[i + 1].split(':');\n                let start = moment(day)\n                    .hour(starttime[0])\n                    .minute(starttime[1])\n                    .second(0);\n                let end = moment(day)\n                    .hour(endtime[0])\n                    .minute(endtime[1])\n                    .second(0);\n                // Push it to the list\n                schedule.push({ start, end, value: \"Break\", id: uuidv4() });\n            }\n            // Remember amount of days added\n            dayCount += 1;\n        }\n\n        return schedule\n    }\n\n    encrypt(text, aesCtr) {\n        // Encrypt the credentials with AES\n        var textBytes = aesjs.utils.utf8.toBytes(text);\n        var textEncrypted = aesCtr.encrypt(textBytes);\n        var textHex = aesjs.utils.hex.fromBytes(textEncrypted);\n\n        return textHex\n    }\n\n    decrypt(textHex, aesCtr) {\n        // Decrypt the credentials with AES\n        var textEncrypted = aesjs.utils.hex.toBytes(textHex);\n        var textDecrypted = aesCtr.decrypt(textEncrypted);\n        var text = aesjs.utils.utf8.fromBytes(textDecrypted);\n\n        return text\n    }\n\n    /**\n     * handle changing from one tab to another and changing the selected tab. \n     */\n    handleTabChange = (event, newValue) => {\n        this.setState({\n            selectedTab: newValue\n        });\n    }\n\n    /**\n     * Handle closing the popup \n     */\n    handlePopupClose = (event, reason) => {\n        // If the user clicked away don't close the popup\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        // Otherwise do close the popup \n        this.setState({\n            popupOpen: false\n        });\n    };\n\n    /**\n     * save the configuration to the state \n     */\n    saveConfiguration(tab, data) {\n        this.setState({\n            [tab]: data,\n            unchanged: false\n        });\n    }\n\n    // Keep selected configuration and start crawler\n    keepConfiguration() {\n        // Get the selected config and needed values\n        const config = remote.getGlobal('selectedConfiguration');\n        const configuration_id = Buffer.from(config._id.id).toString('hex');;\n        const username = this.state.configuration.username;\n        const password = this.state.configuration.password;\n        \n        // Start the crawler and close the window\n        ipcRenderer.send('start-crawler', { configuration_id, username, password });\n        remote.getCurrentWindow().close();\n    }\n\n    // Send configuration\n    sendConfiguration() {\n        // Check if mandatory fields have been filled in\n        if (!this.state.configuration.torPath\n            || !this.state.configuration.frontPageURL\n            || !this.state.configuration.sectionPageURL\n            || !this.state.configuration.threadPageURL\n            || !this.state.configuration.loginPageURL) {\n            // Create a popup to notify the user\n            this.setState({\n                popupOpen: true\n            })\n            return\n        }\n        \n        // Preferences is gotten from this.state.preferences\n        let preferences = this.state.preferences\n\n        // Check if either a schedule has been filled in or the default schedule should be used\n        if (!this.state.preferences.defaultSchedule) {\n            if (this.state.schedule.length === 0) {\n                // Ask the user if default schedule is preferred\n                const clicked = remote.dialog.showMessageBoxSync(remote.getCurrentWindow(), {\n                    message: \"No schedule is created, do you want to use the default schedule?\",\n                    type: \"question\",\n                    buttons: [\"Yes\", \"No\"],\n                    defaultId: 0,\n                    cancelId: 1\n                });    \n                // Set the boolean accordingly\n                if (clicked === 0) {\n                    this.setState({\n                        preferences: { ...this.state.preferences, defaultSchedule: true }\n                    });    \n                    preferences.defaultSchedule = true\n                } else {\n                    return\n                }    \n            }    \n        }    \n\n        // Configuration is gotten from this.state.configuration\n        // To allow default values, the values are retrieved separately\n        let configuration = {\n            \"frontPageURL\": this.state.configuration.frontPageURL,\n            \"sectionPageURL\": this.state.configuration.sectionPageURL,\n            \"subsectionPageURL\": this.state.configuration.subsectionPageURL || \"\",\n            \"threadPageURL\": this.state.configuration.threadPageURL,\n            \"loginPageURL\": this.state.configuration.loginPageURL,\n            \"username\": this.state.configuration.username || \"\",\n            \"password\": this.state.configuration.password || \"\",\n            \"maxThreadAge\": this.state.configuration.maxThreadAge || defaultValues.maxThreadAge,\n            \"maxThreadLength\": this.state.configuration.maxThreadLength || defaultValues.maxThreadLength,\n            \"timezone\": this.state.configuration.timezone || defaultValues.timezone,\n            \"varStartTimeWorkday\": this.state.configuration.varStartTimeWorkday || defaultValues.varStartTimeWorkday,\n            \"varEndTimeWorkday\": this.state.configuration.varEndTimeWorkday || defaultValues.varEndTimeWorkday,\n            \"varStartTimeBreaks\": this.state.configuration.varStartTimeBreaks || defaultValues.varStartTimeBreaks,\n            \"varEndTimeBreaks\": this.state.configuration.varEndTimeBreaks || defaultValues.varEndTimeBreaks,\n            \"linkFollowPolicy\": this.state.configuration.linkFollowPolicy || defaultValues.linkFollowPolicy,\n            \"readingSpeedRangeLower\": this.state.configuration.readingSpeedRangeLower || defaultValues.readingSpeedRangeLower,\n            \"readingSpeedRangeUpper\": this.state.configuration.readingSpeedRangeUpper || defaultValues.readingSpeedRangeUpper,\n            \"maxInterruptionDuration\": this.state.configuration.maxInterruptionDuration || defaultValues.maxInterruptionDuration,\n            \"minInterruptionDuration\": this.state.configuration.minInterruptionDuration || defaultValues.minInterruptionDuration,\n            \"interruptionInterval\": this.state.configuration.interruptionInterval || defaultValues.interruptionInterval,\n            \"varInterruptionInterval\": this.state.configuration.varInterruptionInterval || defaultValues.varInterruptionInterval,\n            \"torPath\": this.state.configuration.torPath,\n        }\n\n        // this.state.keywords is always up-to-date (by design), so it can be used directly\n        let keywords = this.state.keywords;\n\n        // The schedule should be parsed to send the needed data\n        // First add the weekdays for translating from int to weekday\n        const weekdays = {\n            1: \"monday\",\n            2: \"tuesday\",\n            3: \"wednesday\",\n            4: \"thursday\",\n            5: \"friday\",\n            6: \"saturday\",\n            0: \"sunday\"\n        }\n\n        // Create schedule object\n        let schedule = {\n            monday: { workday: [], breaks: [] },\n            tuesday: { workday: [], breaks: [] },\n            wednesday: { workday: [], breaks: [] },\n            thursday: { workday: [], breaks: [] },\n            friday: { workday: [], breaks: [] },\n            saturday: { workday: [], breaks: [] },\n            sunday: { workday: [], breaks: [] },\n        }\n\n        // Take default schedule if no schedule is created\n        if (this.state.preferences.defaultSchedule) {\n            schedule = defaultSchedule;\n        } else {\n            // Add all events planned\n            this.state.schedule.forEach((event) => {\n\n                // Get the start and end moments of the event\n                let start = event.start._d;\n                let end = event.end._d;\n\n                // Get the day of the event\n                let day = weekdays[start.getDay()];\n\n                // Retrieve the time from the moment objects\n                let startTime = start.getHours() + \":\" + start.getMinutes();\n                let endTime = end.getHours() + \":\" + end.getMinutes();\n\n                // Filter type of event\n                if (event.value === \"Workday\") {\n                    schedule[day].workday = [startTime, endTime];\n                } else if (event.value === \"Break\") {\n                    schedule[day].breaks = schedule[day].breaks.concat([startTime, endTime]);\n                } else {\n                    console.error(\"Invalid event: \" + event);\n                }\n            })\n        }\n\n        let data = { preferences, configuration, keywords, schedule };\n\n        // The username and password are sensitive data, so they must not be stored in plaintext\n        const username = data.configuration.username;\n        const password = data.configuration.password;\n\n        // Encrypt the credentials with AES\n        var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(4));\n\n        const usernameHex = this.encrypt(username, aesCtr)\n        const passwordHex = this.encrypt(password, aesCtr)\n\n        data.configuration.username = usernameHex;\n        data.configuration.password = passwordHex;\n\n        // Send the configuration to be saved by the database\n        ipcRenderer.send('save-configuration', data);\n        ipcRenderer.on('save-configuration', (event, configuration_id) => {\n            // Start the crawler and close the window\n            ipcRenderer.send('start-crawler', { configuration_id, username, password });\n            remote.getCurrentWindow().close();\n        });\n    }\n\n    render() {\n        // Select the correct tab to show\n        let tab = null\n        switch(this.state.selectedTab){\n            case 0: \n                tab = \n                    <Preferences\n                        preferences={this.state.preferences}\n                        saveConfiguration={(data) => {\n                            this.saveConfiguration(\"preferences\", data)\n                        }}\n                    />\n                break;\n            case 1:\n                tab =             \n                    <InputConfiguration\n                        configuration={this.state.configuration}\n                        saveConfiguration={(data) => {\n                            this.saveConfiguration(\"configuration\", data)\n                        }}\n                    />\n                break;\n            case 2:\n                tab = \n                    <Keywords\n                        keywords={this.state.keywords}\n                        saveConfiguration={(data) => {\n                            this.saveConfiguration(\"keywords\", data)\n                        }}\n                    />\n                break;\n            case 3:\n                tab = \n                    <Schedule\n                        schedule={this.state.schedule}\n                        saveConfiguration={(data) => {\n                            this.saveConfiguration(\"schedule\", data)\n                        }}\n                    />\n                break;\n            default: \n                break;\n        }\n\n        return (\n            // Show the tab screen \n            <div className=\"Tabs\">\n                <div className=\"TabScreen\">\n                    {/* Show the available tabs and make the selected tab another color */}\n                    <Tabs\n                        value={this.state.selectedTab}\n                        onChange={this.handleTabChange}\n                        indicatorColor=\"primary\"\n                        textColor=\"primary\"\n                        centered\n                    >\n                        <Tab className=\"Tab\" label=\"Preferences\" />\n                        <Tab className=\"Tab\" label=\"Configuration\" />\n                        <Tab className=\"Tab\" label=\"Keywords\" />\n                        <Tab className=\"Tab\" label=\"Schedule\" />\n                    </Tabs>\n                </div>\n\n                {/* Add the content of the tab according to the one selected */}\n                <div className=\"TabContent\">\n                    {tab}\n                </div>\n\n                {/* Add buttons for all tabs */}\n                <Confirmation sendConfiguration={this.state.unchanged ? this.keepConfiguration : this.sendConfiguration} />\n\n                {/* Add a popup to notify user about filling in required fields */}\n                <div>\n                    <Snackbar open={this.state.popupOpen}\n                        autoHideDuration={6000}\n                        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                        onClose={this.handlePopupClose}\n                    >\n                        <Alert onClose={this.handlePopupClose} severity=\"error\">\n                            Please enter all required fields!\n                        </Alert>\n                    </Snackbar>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TabScreen;"]},"metadata":{},"sourceType":"module"}