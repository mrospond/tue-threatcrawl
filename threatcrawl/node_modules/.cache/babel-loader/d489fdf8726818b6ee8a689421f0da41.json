{"ast":null,"code":"import _defineProperty from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _classCallCheck from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import*as React from'react';import{Component}from'react';import{Button,FormControl,InputAdornment,InputLabel,MenuItem,Select,Snackbar,TextField,Tooltip,IconButton}from'@material-ui/core';import ToggleButton from'@material-ui/lab/ToggleButton';import ToggleButtonGroup from'@material-ui/lab/ToggleButtonGroup';import\"../styles/training.css\";import WebViewer from'./components/WebViewer';import{labels,handleViewerClick,labelSections}from'./LabelLogic';import Alert from'@material-ui/lab/Alert';import{FaRegQuestionCircle}from'react-icons/fa';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var electron=window.require('electron');var ipcRenderer=electron.ipcRenderer;var remote=electron.remote;// The possible utility options\nvar utilityOptions=[\"add\",\"remove\",\"ignore\"];/**\n * TrainingMain is the main class for the training screen. \n * \n * In this screen, the user sees a web page that the user should highlight with the provided labels. \n * Once the user is done with highlighting, they can train this web page and will be sent to the doucle check screen.\n */var TrainingMain=/*#__PURE__*/function(_Component){_inherits(TrainingMain,_Component);var _super=_createSuper(TrainingMain);// Constructor\nfunction TrainingMain(props){var _this;_classCallCheck(this,TrainingMain);_this=_super.call(this,props);// Set initial state\n_this.handlePopupClose=function(event,reason){// If the user clicked away don't close the popup\nif(reason==='clickaway'){return;}// Otherwise do close the popup\n_this.setState({pageTypePopupOpen:false});};_this.state=_this.constructInitialState();return _this;}_createClass(TrainingMain,[{key:\"constructInitialState\",value:function constructInitialState(){return{highlightedElements:{},ignoredElements:{},dateFormats:{},unchanged:{},selectedLabel:\"\",utility:utilityOptions[0],pageType:\"\",dateFormatInput:\"\",pageTypePopupOpen:false,page_url:this.props.page_url,viewer_key:0,javascript:\"\"};}},{key:\"componentDidMount\",value:function componentDidMount(){// Retrieve structure\nthis.retrieveStructure();// Set page type if known\nvar pageType=remote.getGlobal(\"pageType\");if(pageType){this.setState({pageType:pageType});}}},{key:\"retrieveStructure\",value:function retrieveStructure(){// Retrieve identifiers from structure gotten from database\nvar identifiers={};var allDateFormats={};for(var _i=0,_Object$entries=Object.entries(remote.getGlobal('identifiers'));_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),pageType=_Object$entries$_i[0],_Object$entries$_i$=_Object$entries$_i[1],structure=_Object$entries$_i$.structure,date_formats=_Object$entries$_i$.date_formats;identifiers[pageType]=structure;allDateFormats[pageType]=date_formats;}this.setState({identifiers:identifiers,allDateFormats:allDateFormats});}},{key:\"webpageLoaded\",value:function webpageLoaded(){// Get the structure sent by the trainer from the main process\nvar pathsStructure=remote.getGlobal('trained_structure');// If there was a structure saved, then select the elements and highlight them\n// Else use the identifiers for the selected pagetype from the database\nif(pathsStructure){// Split date formats and identifiers\nvar elemIdentifiers={};var dateFormats={};for(var _i2=0,_Object$entries2=Object.entries(pathsStructure);_i2<_Object$entries2.length;_i2++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i2],2),label=_Object$entries2$_i[0],_Object$entries2$_i$=_Object$entries2$_i[1],identifier=_Object$entries2$_i$.identifier,date_format=_Object$entries2$_i$.date_format;elemIdentifiers[label]=identifier;dateFormats[label]=date_format;}// Retrieve and highlight the correct elements\nvar structure=this.getElementsFromPath(elemIdentifiers);this.styleElements(structure);// Save the identifiers\nthis.setState({dateFormats:dateFormats});}else if(this.state.pageType){// Retrieve and highlight the correct elements\nvar _structure=this.getElementsFromPath(this.state.identifiers[this.state.pageType]);this.styleElements(_structure);}}// Gets all elements from an xPath\n},{key:\"evaluatePath\",value:function evaluatePath(path,innerDoc){// Find all elements\nvar xPathResult=innerDoc.evaluate(path,innerDoc,null,XPathResult.ANY_TYPE,null);// Push each found element to the array\nvar elements=[];var thisElement=xPathResult.iterateNext();while(thisElement){elements.push(thisElement);thisElement=xPathResult.iterateNext();}// Return the found elements\nreturn elements;}// Uses the XPaths to get the DOM elements\n},{key:\"getElementsFromPath\",value:function getElementsFromPath(pathsStructure){var _this2=this;var viewer=document.getElementById('viewer');var innerDoc=viewer.contentDocument;// Object to save the gathered elements\nvar structure={};var ignoredElements={};var unchanged={};// Loop over all XPaths to get the elements satisfying that path\nvar _loop=function _loop(){var _Object$entries3$_i=_slicedToArray(_Object$entries3[_i3],2),label=_Object$entries3$_i[0],data=_Object$entries3$_i[1];var elements=[];var ignored=[];// Change way of getting the elements depending on the method used\nif(data.HTMLClass){data.HTMLClass.forEach(function(className){var _elements;// Get all elements with a certain class\nvar classResult=innerDoc.getElementsByClassName(className);(_elements=elements).push.apply(_elements,_toConsumableArray(classResult));});}else if(data.XPath){// Evaluate the given xPath\nelements=_this2.evaluatePath(data.XPath,innerDoc);}else if(data.XPathExcept){// Evaluate the given xPath for selected elements\nelements=_this2.evaluatePath(data.XPathExcept.x_path_use,innerDoc);// Evaluate the given xPath for ignored elements\nignored=_this2.evaluatePath(data.XPathExcept.x_path_remove,innerDoc);// Filter ignored elements from the selected elements\nelements=elements.filter(function(e){return!ignored.includes(e);});}// Add elements to the structure Object under the correct label\nstructure[label]=elements;// If ignored, add them to ignored elements\nif(ignored){ignoredElements[label]=ignored;}unchanged[label]=true;};for(var _i3=0,_Object$entries3=Object.entries(pathsStructure);_i3<_Object$entries3.length;_i3++){_loop();}// Set the structure in the state\nthis.setState({highlightedElements:structure,ignoredElements:ignoredElements,unchanged:unchanged});return structure;}// Add styling to the gathered elements\n},{key:\"styleElements\",value:function styleElements(structure){var _this3=this;var _loop2=function _loop2(){var _Object$entries4$_i=_slicedToArray(_Object$entries4[_i4],2),label=_Object$entries4$_i[0],elements=_Object$entries4$_i[1];elements.forEach(function(element){_this3.styleElement(element,label);});};// Highlight the given structure\nfor(var _i4=0,_Object$entries4=Object.entries(structure);_i4<_Object$entries4.length;_i4++){_loop2();}}},{key:\"styleElement\",value:function styleElement(element,label){// Add border and background color to element \nelement.style.backgroundColor=labels[label].color;element.style.border=\"thin solid rgba(0,0,0, 0.25)\";}/**\n     * Handles the highlighted elements and saves in a dictionary. \n     * \n     * The dictionary saves for each label the XPath of all elements that are highlighted with that color. \n     */},{key:\"trainStructure\",value:function trainStructure(){var _this4=this;// Check if page type is selected\nif(!this.state.pageType){// Open popup\nthis.setState({pageTypePopupOpen:true});// Don't send structure\nreturn;}// Array for saving the labels with XPath of highlighted elements\nvar structural_elements={};// Loop through the highlighted elements \nvar _loop3=function _loop3(){var label=_Object$keys[_i5];// For each label, create labelXPath that saves the XPaths for highlighted elements \nvar labelElements={selected_elements:[],ignored_elements:[],date_format:\"\",prev_identifier:[]};// For each highlighted element, push the XPath and outerHTML\nif(_this4.state.highlightedElements[label]){_this4.state.highlightedElements[label].forEach(function(element){labelElements.selected_elements.push({x_path:_this4.getXPath(element),outer_html:element.outerHTML});});}// For each ignored element, push the XPath and outerHTML \nif(_this4.state.ignoredElements[label]){_this4.state.ignoredElements[label].forEach(function(element){labelElements.ignored_elements.push({x_path:_this4.getXPath(element),outer_html:element.outerHTML});});}// For the current label, save the date format\nlabelElements.date_format=_this4.state.dateFormats[label];// For each label, push the XPaths array with label name in dictionary \nstructural_elements[label]=labelElements;};for(var _i5=0,_Object$keys=Object.keys(labels);_i5<_Object$keys.length;_i5++){_loop3();}// Add the elements that are not on this webpage\nif(this.state.identifiers[this.state.pageType]){for(var _i6=0,_Object$entries5=Object.entries(this.state.identifiers[this.state.pageType]);_i6<_Object$entries5.length;_i6++){var _Object$entries5$_i=_slicedToArray(_Object$entries5[_i6],2),label=_Object$entries5$_i[0],elements=_Object$entries5$_i[1];if(!(structural_elements[label].selected_elements.length>0)||this.state.unchanged[label]){structural_elements[label].prev_identifier.push(elements);}}}// Set data to send\nvar data={page_type:this.state.pageType,structural_elements:structural_elements,javascript:document.getElementById(\"txtjs\").value};// Send structure to main process\nipcRenderer.send('structure',data);// Close the training screen\nremote.getCurrentWindow().close();}/**\n     * Gets the xPath of the given element\n     */},{key:\"getXPath\",value:function getXPath(elm){var i,sib;// Loop over the path and save the steps\nfor(var segs=[];elm&&elm.nodeType===1;elm=elm.parentNode){for(i=1,sib=elm.previousSibling;sib;sib=sib.previousSibling){if(sib.localName===elm.localName)i++;};segs.unshift(elm.localName.toLowerCase()+'['+i+']');};// Return the path through the segment\nreturn segs.length?'/'+segs.join('/'):null;}},{key:\"reloadViewer\",value:function reloadViewer(pageType){// Refresh the WebViewer\nthis.setState(_objectSpread(_objectSpread({},this.constructInitialState()),{},{// Save pageType if given\npageType:pageType,// Set correct date formats\ndateFormats:this.state.allDateFormats[pageType]||{},// Changing the key will reload the WebViewer, discarding all changes in the webpage\nviewer_key:Math.floor(Math.random()*1e9)}));// Get back the structure from the database\nthis.retrieveStructure();}/**\n     * Resets the highlighted elements and structure. \n     */},{key:\"resetStructure\",value:function resetStructure(){// Send reset signal to main process\nipcRenderer.send('reset',this.state.pageType);// Reload the viewer to erase highlighting\nthis.reloadViewer(this.state.pageType);}/**\n     * Handles selecting page type from the spinner\n     */},{key:\"handlePageType\",value:function handlePageType(event){// Save selected page type\nvar pageType=event.target.value;// Save page type in state\nthis.setState({pageType:pageType});// Reload viewer\nthis.reloadViewer(pageType);}/**\n     * Handle closing the popup\n     */},{key:\"handleDateInput\",value:/**\n     * Handles saving the dateformat input\n     */function handleDateInput(event){// Save dateformat \nvar dateFormat=event.target.value;this.setState({dateFormatInput:dateFormat,dateFormats:_objectSpread(_objectSpread({},this.state.dateFormats),{},_defineProperty({},this.state.selectedLabel,dateFormat))});}/**\n     * Handles selecting the utility\n     */},{key:\"handleSelectedUtility\",value:function handleSelectedUtility(event,utility){if(utility!==null){this.setState({utility:utility});}}},{key:\"executeJS\",value:function executeJS(){// Unfortunately the page is not really active by design, so I cannot execute there the Javascript to verify.\n// Function('\"use strict\";return (' + document.getElementById(\"txtjs\").value + ')')();\n// eval(document.getElementById(\"txtjs\").value)\n// document.evaluate('//*[@id=\"top\"]/div[2]/div[2]/div[2]/div/nav/div/div[3]/div[1]/a[2]/span', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\n// document.getElementById(\"buttonExecuteJS\").disabled = true;\n// Set data to send\nvar data={javascript:document.getElementById(\"txtjs\").value};// Send communication about JavaScript execution to main process\nipcRenderer.send('structure',data);// Close the training screen\nremote.getCurrentWindow().close();}},{key:\"prefillClick\",value:function prefillClick(){document.getElementById(\"txtjs\").value=\"document.evaluate('YOUR_XPATH_HERE', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\";}},{key:\"render\",value:function render(){var _this5=this;// Text to be shown in the date format tooltip\nvar tooltipText=/*#__PURE__*/_jsxs(\"div\",{children:[\"The syntax that is expected from 'date_format' is listed\",/*#__PURE__*/_jsx(\"a\",{href:\"https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior\",target:\"_blank\",rel:\"noreferrer\",children:\" here \"}),\".\"]});return/*#__PURE__*/_jsx(\"div\",{className:\"TrainingScreen\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"TSWebViewer\",children:/*#__PURE__*/_jsx(WebViewer,{label:this.state.selectedLabel,handleClick:function handleClick(element){handleViewerClick(_this5,element);},showAlert:true,on_load:this.webpageLoaded.bind(this),page_url:'file://'+remote.getGlobal('WEBPAGE_DIRECTORY_PATH')+'index.html'},this.state.viewer_key)}),/*#__PURE__*/_jsxs(\"div\",{className:\"TrainingSidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{for:\"txtjs\",children:\"JavaScript to execute:\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"txtjs\",cols:\"30\",rows:\"5\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{onClick:this.prefillClick,id:\"clickButtonJS\",children:\"Prefill with JS to click element\"}),/*#__PURE__*/_jsx(\"button\",{onClick:this.executeJS,id:\"buttonExecuteJS\",children:\"Execute\"})]}),/*#__PURE__*/_jsxs(FormControl,{variant:\"outlined\",size:\"small\",children:[/*#__PURE__*/_jsx(InputLabel,{id:\"demo-simple-select-outlined-label\",children:\"Page type\"}),/*#__PURE__*/_jsxs(Select,{labelId:\"demo-simple-select-outlined-label\",id:\"demo-simple-select-outlined\",label:\"Page type\",value:this.state.pageType,onChange:this.handlePageType.bind(this),children:[/*#__PURE__*/_jsx(MenuItem,{value:\"LoginPage\",children:\"Log-in page\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"FrontPage\",children:\"Front page\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"SectionPage\",children:\"Section page\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"SubsectionPage\",children:\"Subsection page\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"ThreadPage\",children:\"Thread page\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"UtilityToggle\",children:/*#__PURE__*/_jsx(ToggleButtonGroup,{className:\"UtilityToggle\",exclusive:true,size:\"small\",value:this.state.utility,onChange:this.handleSelectedUtility.bind(this),children:utilityOptions.map(function(option){return/*#__PURE__*/_jsx(ToggleButton,{value:option,children:option});})})}),labelSections(this),this.state.selectedLabel?/*#__PURE__*/ /* Date format input field */_jsx(TextField,{id:\"outlined-textarea\",label:\"Date format\",placeholder:\"DD/MM/Y\",InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(Tooltip,{title:/*#__PURE__*/_jsx(React.Fragment,{children:tooltipText}),interactive:true,children:/*#__PURE__*/_jsx(IconButton,{style:{backgroundColor:'transparent'},children:/*#__PURE__*/_jsx(FaRegQuestionCircle,{})})})})},variant:\"outlined\",size:\"small\",value:this.state.dateFormatInput,onChange:this.handleDateInput.bind(this)}):null,/*#__PURE__*/_jsx(Button,{className:\"ConfirmationStructureButton\",onClick:this.trainStructure.bind(this),children:\"Train structure\"}),/*#__PURE__*/_jsx(Button,{className:\"ConfirmationStructureButton\",onClick:this.resetStructure.bind(this),children:\"Reset structure\"})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Snackbar,{open:this.state.pageTypePopupOpen,autoHideDuration:6000,anchorOrigin:{vertical:'top',horizontal:'center'},onClose:this.handlePopupClose,children:/*#__PURE__*/_jsx(Alert,{onClose:this.handlePopupClose,severity:\"error\",children:\"Please select a page type!\"})})})]})});}}]);return TrainingMain;}(Component);export default TrainingMain;","map":{"version":3,"sources":["/home/ubuntu/THREATcrawl/threatcrawl/src/training_screen/TrainingMain.js"],"names":["React","Component","Button","FormControl","InputAdornment","InputLabel","MenuItem","Select","Snackbar","TextField","Tooltip","IconButton","ToggleButton","ToggleButtonGroup","WebViewer","labels","handleViewerClick","labelSections","Alert","FaRegQuestionCircle","electron","window","require","ipcRenderer","remote","utilityOptions","TrainingMain","props","handlePopupClose","event","reason","setState","pageTypePopupOpen","state","constructInitialState","highlightedElements","ignoredElements","dateFormats","unchanged","selectedLabel","utility","pageType","dateFormatInput","page_url","viewer_key","javascript","retrieveStructure","getGlobal","identifiers","allDateFormats","Object","entries","structure","date_formats","pathsStructure","elemIdentifiers","label","identifier","date_format","getElementsFromPath","styleElements","path","innerDoc","xPathResult","evaluate","XPathResult","ANY_TYPE","elements","thisElement","iterateNext","push","viewer","document","getElementById","contentDocument","data","ignored","HTMLClass","forEach","className","classResult","getElementsByClassName","XPath","evaluatePath","XPathExcept","x_path_use","x_path_remove","filter","e","includes","element","styleElement","style","backgroundColor","color","border","structural_elements","labelElements","selected_elements","ignored_elements","prev_identifier","x_path","getXPath","outer_html","outerHTML","keys","length","page_type","value","send","getCurrentWindow","close","elm","i","sib","segs","nodeType","parentNode","previousSibling","localName","unshift","toLowerCase","join","Math","floor","random","reloadViewer","target","dateFormat","tooltipText","webpageLoaded","bind","prefillClick","executeJS","handlePageType","handleSelectedUtility","map","option","endAdornment","handleDateInput","trainStructure","resetStructure","vertical","horizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport { Button, FormControl, InputAdornment, InputLabel, MenuItem, Select, Snackbar, TextField, Tooltip, IconButton } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport \"../styles/training.css\";\nimport WebViewer from './components/WebViewer';\nimport { labels, handleViewerClick, labelSections } from './LabelLogic';\nimport Alert from '@material-ui/lab/Alert';\nimport { FaRegQuestionCircle } from 'react-icons/fa';\n\nconst electron = window.require('electron');\nconst ipcRenderer = electron.ipcRenderer;\nconst remote = electron.remote;\n\n// The possible utility options\nconst utilityOptions = [\"add\", \"remove\", \"ignore\"]\n\n/**\n * TrainingMain is the main class for the training screen. \n * \n * In this screen, the user sees a web page that the user should highlight with the provided labels. \n * Once the user is done with highlighting, they can train this web page and will be sent to the doucle check screen.\n */\nclass TrainingMain extends Component {\n\n    // Constructor\n    constructor(props) {\n        super(props);\n\n        // Set initial state\n        this.state = this.constructInitialState();\n    }\n\n    constructInitialState() {\n        return {\n            highlightedElements: {},\n            ignoredElements: {},\n            dateFormats: {},\n            unchanged: {},\n            selectedLabel: \"\",\n            utility: utilityOptions[0],\n            pageType: \"\",\n            dateFormatInput: \"\",\n            pageTypePopupOpen: false,\n            page_url: this.props.page_url,\n            viewer_key: 0,\n            javascript: \"\"\n        };\n    }\n\n    componentDidMount() {\n        // Retrieve structure\n        this.retrieveStructure();\n\n        // Set page type if known\n        const pageType = remote.getGlobal(\"pageType\")\n        if (pageType) {\n            this.setState({\n                pageType: pageType\n            });\n        }\n    }\n\n    retrieveStructure() {\n        // Retrieve identifiers from structure gotten from database\n        let identifiers = {};\n        let allDateFormats = {};\n        for (const [pageType, {structure, date_formats}] of Object.entries(remote.getGlobal('identifiers'))) {\n            identifiers[pageType] = structure;\n            allDateFormats[pageType] = date_formats;\n        }\n\n        this.setState({\n            identifiers: identifiers,\n            allDateFormats: allDateFormats\n        })\n    }\n\n    webpageLoaded() {\n        // Get the structure sent by the trainer from the main process\n        const pathsStructure = remote.getGlobal('trained_structure');\n\n        // If there was a structure saved, then select the elements and highlight them\n        // Else use the identifiers for the selected pagetype from the database\n        if (pathsStructure) {\n            // Split date formats and identifiers\n            let elemIdentifiers = {}\n            let dateFormats = {}\n            for (const [label, {identifier, date_format}] of Object.entries(pathsStructure)) {\n                elemIdentifiers[label] = identifier\n                dateFormats[label] = date_format\n            }\n            // Retrieve and highlight the correct elements\n            let structure = this.getElementsFromPath(elemIdentifiers);\n            this.styleElements(structure);\n            // Save the identifiers\n            this.setState({\n                dateFormats: dateFormats\n            })\n        } else if (this.state.pageType) {\n            // Retrieve and highlight the correct elements\n            let structure = this.getElementsFromPath(this.state.identifiers[this.state.pageType]);\n            this.styleElements(structure);\n        }\n\n    }\n\n    // Gets all elements from an xPath\n    evaluatePath(path, innerDoc) {\n        // Find all elements\n        let xPathResult = innerDoc.evaluate(\n            path,\n            innerDoc,\n            null,\n            XPathResult.ANY_TYPE,\n            null\n        );\n\n        // Push each found element to the array\n        let elements = [];\n        let thisElement = xPathResult.iterateNext();\n        while (thisElement) {\n            elements.push(thisElement)\n            thisElement = xPathResult.iterateNext();\n        }\n\n        // Return the found elements\n        return elements\n    }\n\n    // Uses the XPaths to get the DOM elements\n    getElementsFromPath(pathsStructure) {\n        const viewer = document.getElementById('viewer');\n        const innerDoc = viewer.contentDocument;\n\n        // Object to save the gathered elements\n        let structure = {};\n        let ignoredElements = {};\n        let unchanged = {};\n\n        // Loop over all XPaths to get the elements satisfying that path\n        for (const [label, data] of Object.entries(pathsStructure)) {\n            let elements = []\n            let ignored = []\n\n            // Change way of getting the elements depending on the method used\n            if (data.HTMLClass) {\n                data.HTMLClass.forEach((className) => {\n                    // Get all elements with a certain class\n                    const classResult = innerDoc.getElementsByClassName(className);\n\n                    elements.push(...classResult);\n                })\n            } else if (data.XPath) {\n                // Evaluate the given xPath\n                elements = this.evaluatePath(data.XPath, innerDoc);\n            } else if (data.XPathExcept) {\n                // Evaluate the given xPath for selected elements\n                elements = this.evaluatePath(data.XPathExcept.x_path_use, innerDoc);\n\n                // Evaluate the given xPath for ignored elements\n                ignored = this.evaluatePath(data.XPathExcept.x_path_remove, innerDoc);\n\n                // Filter ignored elements from the selected elements\n                elements = elements.filter((e) => !ignored.includes(e));\n            }\n\n            // Add elements to the structure Object under the correct label\n            structure[label] = elements;\n\n            // If ignored, add them to ignored elements\n            if (ignored) {\n                ignoredElements[label] = ignored\n            }\n\n            unchanged[label] = true\n        }\n\n        // Set the structure in the state\n        this.setState({\n            highlightedElements: structure,\n            ignoredElements: ignoredElements,\n            unchanged: unchanged\n        });\n\n        return structure\n    }\n\n    // Add styling to the gathered elements\n    styleElements(structure) {\n        // Highlight the given structure\n        for (const [label, elements] of Object.entries(structure)) {\n            elements.forEach((element) => {\n                this.styleElement(element, label);\n            });\n        }\n    }\n\n    styleElement(element, label) {\n        // Add border and background color to element \n        element.style.backgroundColor = labels[label].color;\n        element.style.border = \"thin solid rgba(0,0,0, 0.25)\";\n    }\n\n    /**\n     * Handles the highlighted elements and saves in a dictionary. \n     * \n     * The dictionary saves for each label the XPath of all elements that are highlighted with that color. \n     */\n    trainStructure() {\n\n        // Check if page type is selected\n        if (!this.state.pageType) {\n            // Open popup\n            this.setState({\n                pageTypePopupOpen: true\n            });\n\n            // Don't send structure\n            return\n        }\n\n        // Array for saving the labels with XPath of highlighted elements\n        let structural_elements = {};\n\n        // Loop through the highlighted elements \n        for (const label of Object.keys(labels)) {\n\n            // For each label, create labelXPath that saves the XPaths for highlighted elements \n            let labelElements = {\n                selected_elements: [],\n                ignored_elements: [],\n                date_format: \"\",\n                prev_identifier: []\n            };\n\n            // For each highlighted element, push the XPath and outerHTML\n            if (this.state.highlightedElements[label]) {\n                this.state.highlightedElements[label].forEach(element => {\n                    labelElements.selected_elements.push({\n                        x_path: this.getXPath(element),\n                        outer_html: element.outerHTML\n                    });\n                });\n            }\n\n            // For each ignored element, push the XPath and outerHTML \n            if (this.state.ignoredElements[label]) {\n                this.state.ignoredElements[label].forEach(element => {\n                    labelElements.ignored_elements.push({\n                        x_path: this.getXPath(element),\n                        outer_html: element.outerHTML\n                    });\n                });\n            }\n\n            // For the current label, save the date format\n            labelElements.date_format = this.state.dateFormats[label];\n\n            // For each label, push the XPaths array with label name in dictionary \n            structural_elements[label] = labelElements;\n        }\n\n        // Add the elements that are not on this webpage\n        if (this.state.identifiers[this.state.pageType]) {\n            for (let [label, elements] of Object.entries(this.state.identifiers[this.state.pageType])) {\n                if (!(structural_elements[label].selected_elements.length > 0) || this.state.unchanged[label]) {\n                    structural_elements[label].prev_identifier.push(elements)\n                }\n            }\n        }\n\n        // Set data to send\n        const data = {\n            page_type: this.state.pageType,\n            structural_elements,\n            javascript: document.getElementById(\"txtjs\").value\n        };\n\n\n        // Send structure to main process\n        ipcRenderer.send('structure', data);\n\n        // Close the training screen\n        remote.getCurrentWindow().close();\n    }\n\n    /**\n     * Gets the xPath of the given element\n     */\n    getXPath(elm) {\n        let i, sib;\n\n        // Loop over the path and save the steps\n        for (var segs = []; elm && elm.nodeType === 1; elm = elm.parentNode) {\n            for (i = 1, sib = elm.previousSibling; sib; sib = sib.previousSibling) {\n                if (sib.localName === elm.localName) i++;\n            };\n            segs.unshift(elm.localName.toLowerCase() + '[' + i + ']');\n        };\n\n        // Return the path through the segment\n        return segs.length ? '/' + segs.join('/') : null;\n    }\n\n    reloadViewer(pageType) {\n        // Refresh the WebViewer\n        this.setState({\n            ...this.constructInitialState(),\n            // Save pageType if given\n            pageType: pageType,\n            // Set correct date formats\n            dateFormats: this.state.allDateFormats[pageType] || {},\n            // Changing the key will reload the WebViewer, discarding all changes in the webpage\n            viewer_key: Math.floor(Math.random() * 1e9),\n        });\n\n        // Get back the structure from the database\n        this.retrieveStructure();\n    }\n\n    /**\n     * Resets the highlighted elements and structure. \n     */\n    resetStructure() {\n        // Send reset signal to main process\n        ipcRenderer.send('reset', this.state.pageType);\n        \n        // Reload the viewer to erase highlighting\n        this.reloadViewer(this.state.pageType);\n    }\n\n\n    /**\n     * Handles selecting page type from the spinner\n     */\n    handlePageType(event) {\n        // Save selected page type\n        let pageType = event.target.value\n\n        // Save page type in state\n        this.setState({\n            pageType: pageType,\n        })\n\n        // Reload viewer\n        this.reloadViewer(pageType);\n    }\n\n    /**\n     * Handle closing the popup\n     */\n    handlePopupClose = (event, reason) => {\n        // If the user clicked away don't close the popup\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        // Otherwise do close the popup\n        this.setState({\n            pageTypePopupOpen: false\n        });\n    };\n\n    /**\n     * Handles saving the dateformat input\n     */\n    handleDateInput(event) {\n        // Save dateformat \n        let dateFormat = event.target.value\n        this.setState({\n            dateFormatInput: dateFormat,\n            dateFormats: { ...this.state.dateFormats, [this.state.selectedLabel]: dateFormat }\n        })\n    }\n\n    /**\n     * Handles selecting the utility\n     */\n    handleSelectedUtility(event, utility) {\n        if (utility !== null) {\n            this.setState({\n                utility: utility\n            })\n        }\n    }\n\n    executeJS() {\n        // Unfortunately the page is not really active by design, so I cannot execute there the Javascript to verify.\n        // Function('\"use strict\";return (' + document.getElementById(\"txtjs\").value + ')')();\n        // eval(document.getElementById(\"txtjs\").value)\n        // document.evaluate('//*[@id=\"top\"]/div[2]/div[2]/div[2]/div/nav/div/div[3]/div[1]/a[2]/span', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\n        // document.getElementById(\"buttonExecuteJS\").disabled = true;\n\n        // Set data to send\n        const data = {\n            javascript: document.getElementById(\"txtjs\").value\n        };\n\n        // Send communication about JavaScript execution to main process\n        ipcRenderer.send('structure', data);\n\n        // Close the training screen\n        remote.getCurrentWindow().close();\n    }\n\n    prefillClick() {\n        document.getElementById(\"txtjs\").value = \"document.evaluate('YOUR_XPATH_HERE', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\"    \n    }\n\n    render() {\n\n        // Text to be shown in the date format tooltip\n        const tooltipText = <div>\n            The syntax that is expected from 'date_format' is listed\n            <a href=\"https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior\" target=\"_blank\" rel=\"noreferrer\"> here </a>.\n        </div>\n  \n        return (      \n            <div className=\"TrainingScreen\">\n                <div>\n                    {/* Render the WebViewer */}\n                    <div className=\"TSWebViewer\">\n                        <WebViewer\n                            label={this.state.selectedLabel}\n                            handleClick={(element) => { handleViewerClick(this, element) }}\n                            showAlert={true}\n                            on_load={this.webpageLoaded.bind(this)}\n                            page_url={'file://' + remote.getGlobal('WEBPAGE_DIRECTORY_PATH') + 'index.html'}\n                            key={this.state.viewer_key}\n                        />\n                    </div>\n\n                    {/* Render the sidebar with labels and buttons */}\n                    <div className=\"TrainingSidebar\">\n\n                        {/*Perform operations before training*/}\n                        <div>\n                        <label for=\"txtjs\">JavaScript to execute:</label>\n                        <textarea id=\"txtjs\" cols=\"30\" rows=\"5\"></textarea>\n                        <br></br>\n                        <button\n                            onClick={this.prefillClick}\n                            id=\"clickButtonJS\">\n                            Prefill with JS to click element\n                        </button>\n                        <button\n                            onClick={this.executeJS}\n                            id=\"buttonExecuteJS\">\n                            Execute\n                        </button>\n                        </div>\n\n                        {/* Choice for page type */}\n                        <FormControl\n                            variant=\"outlined\"\n                            size=\"small\"\n                        >\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                Page type\n                            </InputLabel>\n\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                label=\"Page type\"\n                                value={this.state.pageType}\n                                onChange={this.handlePageType.bind(this)}\n                            >\n                                <MenuItem value={\"LoginPage\"}>Log-in page</MenuItem>\n                                <MenuItem value={\"FrontPage\"}>Front page</MenuItem>\n                                <MenuItem value={\"SectionPage\"}>Section page</MenuItem>\n                                <MenuItem value={\"SubsectionPage\"}>Subsection page</MenuItem>\n                                <MenuItem value={\"ThreadPage\"}>Thread page</MenuItem>\n                            </Select>\n                        </FormControl>\n\n                        {/* Toggle for utility options */}\n                        <div className=\"UtilityToggle\">\n                            <ToggleButtonGroup\n                                className=\"UtilityToggle\"\n                                exclusive\n                                size=\"small\"\n                                value={this.state.utility}\n                                onChange={this.handleSelectedUtility.bind(this)}\n                            >\n                                {utilityOptions.map(\n                                    option => <ToggleButton value={option}>{option}</ToggleButton>)\n                                }\n                            </ToggleButtonGroup>\n                        </div>\n\n                        {/* Labels to show */}\n                        {labelSections(this)}\n\n                        {/* If a label is selected, show the date format input for that label */}\n                        {this.state.selectedLabel ?\n                            /* Date format input field */\n                            < TextField\n                                id=\"outlined-textarea\"\n                                label=\"Date format\"\n                                placeholder=\"DD/MM/Y\"\n                                InputProps={{\n                                    endAdornment:\n                                    <InputAdornment position=\"end\">\n                                            {/* Add tooltip */}\n                                            <Tooltip title={\n                                                <React.Fragment>\n                                                    {tooltipText}\n                                                </React.Fragment>\n                                            } interactive>\n                                                <IconButton style={{ backgroundColor: 'transparent' }} >\n                                                    <FaRegQuestionCircle />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                }}\n                                variant=\"outlined\"\n                                size=\"small\"\n                                value={this.state.dateFormatInput}\n                                onChange={this.handleDateInput.bind(this)}\n                            />\n                            :\n                            null\n                        }\n\n                        {/* Train button */}\n                        <Button\n                            className=\"ConfirmationStructureButton\"\n                            onClick={this.trainStructure.bind(this)}>\n                            Train structure\n                        </Button>\n\n                        {/* Reset button */}\n                        <Button\n                            className=\"ConfirmationStructureButton\"\n                            onClick={this.resetStructure.bind(this)}>\n                            Reset structure\n                        </Button>\n\n                    </div>\n\n                    {/* Add a popup to notify user about selecting a page type */}\n                    <div>\n                        <Snackbar open={this.state.pageTypePopupOpen}\n                            autoHideDuration={6000}\n                            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                            onClose={this.handlePopupClose}\n                        >\n                            <Alert onClose={this.handlePopupClose} severity=\"error\">\n                                Please select a page type!\n                            </Alert>\n                        </Snackbar>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default TrainingMain;"]},"metadata":{},"sourceType":"module"}