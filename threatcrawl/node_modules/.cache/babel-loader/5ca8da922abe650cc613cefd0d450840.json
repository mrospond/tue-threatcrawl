{"ast":null,"code":"import _classCallCheck from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/ubuntu/THREATcrawl/threatcrawl/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import*as React from'react';import{Component}from'react';import ConfigItem from'./components/ConfigItem';import\"../styles/start.css\";import{jsx as _jsx}from\"react/jsx-runtime\";var electron=window.require('electron');var ipcRenderer=electron.ipcRenderer;var remote=electron.remote;/**\n * ConfigurationSelection is the class that is used to select previously used configurations. \n * \n * In this class the user wil be able to select a configuration and get redirected to the configuration screen. \n * The values of the selected configuration are filled in in the configuration screen. \n */var ConfigurationSelection=/*#__PURE__*/function(_Component){_inherits(ConfigurationSelection,_Component);var _super=_createSuper(ConfigurationSelection);function ConfigurationSelection(props){var _this;_classCallCheck(this,ConfigurationSelection);_this=_super.call(this,props);_this.state={configurations:[]};// Bind functions to this context\n_this.sendConfig=_this.sendConfig.bind(_assertThisInitialized(_this));_this.deleteConfig=_this.deleteConfig.bind(_assertThisInitialized(_this));return _this;}_createClass(ConfigurationSelection,[{key:\"componentDidMount\",value:function componentDidMount(){// Get configurations from database\nvar configurations=remote.getGlobal(\"configurations\")||[];console.log(remote.getGlobal(\"configurations\"));this.setState({configurations:configurations.reverse()});}// Send selected configuration to the main process\n},{key:\"sendConfig\",value:function sendConfig(configuration){ipcRenderer.send(\"selectConfig\",configuration);}// Delete the configuration from the list and from the database\n},{key:\"deleteConfig\",value:function deleteConfig(configuration){// Send the configuration with the id to the main process\nipcRenderer.send(\"deleteConfig\",{configuration:configuration,id:configuration._id.toHexString()});// Remove it from the rendered list\nthis.setState({configurations:this.state.configurations.filter(function(config){return config!==configuration;})});}},{key:\"render\",value:function render(){var _this2=this;// Create the list of ConfigItem objects\nvar configurationList=this.state.configurations.map(function(configuration){return/*#__PURE__*/_jsx(ConfigItem,{platform:configuration.configuration.frontPageURL,timestamp:configuration._id.getTimestamp(),sendConfig:function sendConfig(){_this2.sendConfig(configuration);},deleteConfig:function deleteConfig(){_this2.deleteConfig(configuration);}},\"cfi-\".concat(configuration._id));});return/*#__PURE__*/_jsx(\"div\",{className:\"StartScreen\",color:\"inherit\",children:/*#__PURE__*/_jsx(\"div\",{className:\"ConfigList\",children:configurationList.length===0?/*#__PURE__*/_jsx(\"div\",{children:\"No configurations could be found in the database\"}):configurationList})});}}]);return ConfigurationSelection;}(Component);export default ConfigurationSelection;","map":{"version":3,"sources":["/home/ubuntu/THREATcrawl/threatcrawl/src/start_screen/ConfigurationSelection.js"],"names":["React","Component","ConfigItem","electron","window","require","ipcRenderer","remote","ConfigurationSelection","props","state","configurations","sendConfig","bind","deleteConfig","getGlobal","console","log","setState","reverse","configuration","send","id","_id","toHexString","filter","config","configurationList","map","frontPageURL","getTimestamp","length"],"mappings":"kmBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CAEA,MAAO,qBAAP,C,2CAEA,GAAMC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,OAAP,CAAe,UAAf,CAAjB,CACA,GAAMC,CAAAA,WAAW,CAAGH,QAAQ,CAACG,WAA7B,CACA,GAAMC,CAAAA,MAAM,CAAGJ,QAAQ,CAACI,MAAxB,CAEA;AACA;AACA;AACA;AACA;AACA,G,GACMC,CAAAA,sB,gIAEF,gCAAYC,KAAZ,CAAmB,wDACf,uBAAMA,KAAN,EAEA,MAAKC,KAAL,CAAa,CACTC,cAAc,CAAE,EADP,CAAb,CAIA;AACA,MAAKC,UAAL,CAAkB,MAAKA,UAAL,CAAgBC,IAAhB,+BAAlB,CACA,MAAKC,YAAL,CAAoB,MAAKA,YAAL,CAAkBD,IAAlB,+BAApB,CATe,aAUlB,C,oEAED,4BAAoB,CAChB;AACA,GAAIF,CAAAA,cAAc,CAAGJ,MAAM,CAACQ,SAAP,CAAiB,gBAAjB,GAAsC,EAA3D,CACAC,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACQ,SAAP,CAAiB,gBAAjB,CAAZ,EACA,KAAKG,QAAL,CAAc,CACVP,cAAc,CAAEA,cAAc,CAACQ,OAAf,EADN,CAAd,EAGH,CAED;0BACA,oBAAWC,aAAX,CAA0B,CACtBd,WAAW,CAACe,IAAZ,CAAiB,cAAjB,CAAiCD,aAAjC,EACH,CAED;4BACA,sBAAaA,aAAb,CAA4B,CACxB;AACAd,WAAW,CAACe,IAAZ,CAAiB,cAAjB,CAAiC,CAACD,aAAa,CAAbA,aAAD,CAAgBE,EAAE,CAAEF,aAAa,CAACG,GAAd,CAAkBC,WAAlB,EAApB,CAAjC,EAEA;AACA,KAAKN,QAAL,CAAc,CACVP,cAAc,CAAE,KAAKD,KAAL,CAAWC,cAAX,CAA0Bc,MAA1B,CAAiC,SAAAC,MAAM,CAAI,CAAE,MAAOA,CAAAA,MAAM,GAAKN,aAAlB,CAAiC,CAA9E,CADN,CAAd,EAGH,C,sBAED,iBAAS,iBACL;AACA,GAAMO,CAAAA,iBAAiB,CAAG,KAAKjB,KAAL,CAAWC,cAAX,CAA0BiB,GAA1B,CAA8B,SAAAR,aAAa,qBACjE,KAAC,UAAD,EAEI,QAAQ,CAAEA,aAAa,CAACA,aAAd,CAA4BS,YAF1C,CAGI,SAAS,CAAET,aAAa,CAACG,GAAd,CAAkBO,YAAlB,EAHf,CAII,UAAU,CAAE,qBAAM,CAAE,MAAI,CAAClB,UAAL,CAAgBQ,aAAhB,EAAgC,CAJxD,CAKI,YAAY,CAAE,uBAAM,CAAE,MAAI,CAACN,YAAL,CAAkBM,aAAlB,EAAkC,CAL5D,gBACgBA,aAAa,CAACG,GAD9B,EADiE,EAA3C,CAA1B,CAUA,mBACI,YAAK,SAAS,CAAC,aAAf,CAA6B,KAAK,CAAC,SAAnC,uBACI,YAAK,SAAS,CAAC,YAAf,UAGKI,iBAAiB,CAACI,MAAlB,GAA6B,CAA7B,cACK,yEADL,CAEKJ,iBALV,EADJ,EADJ,CAaH,C,oCAhEgC1B,S,EAoErC,cAAeO,CAAAA,sBAAf","sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport ConfigItem from './components/ConfigItem';\n\nimport \"../styles/start.css\";\n\nconst electron = window.require('electron');\nconst ipcRenderer = electron.ipcRenderer;\nconst remote = electron.remote;\n\n/**\n * ConfigurationSelection is the class that is used to select previously used configurations. \n * \n * In this class the user wil be able to select a configuration and get redirected to the configuration screen. \n * The values of the selected configuration are filled in in the configuration screen. \n */\nclass ConfigurationSelection extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            configurations: []\n        }\n\n        // Bind functions to this context\n        this.sendConfig = this.sendConfig.bind(this)\n        this.deleteConfig = this.deleteConfig.bind(this)\n    }\n\n    componentDidMount() {\n        // Get configurations from database\n        let configurations = remote.getGlobal(\"configurations\") || [];\n        console.log(remote.getGlobal(\"configurations\"));\n        this.setState({\n            configurations: configurations.reverse()\n        })\n    }\n\n    // Send selected configuration to the main process\n    sendConfig(configuration) {\n        ipcRenderer.send(\"selectConfig\", configuration);\n    }\n\n    // Delete the configuration from the list and from the database\n    deleteConfig(configuration) {\n        // Send the configuration with the id to the main process\n        ipcRenderer.send(\"deleteConfig\", {configuration, id: configuration._id.toHexString()});\n        \n        // Remove it from the rendered list\n        this.setState({\n            configurations: this.state.configurations.filter(config => { return config !== configuration })\n        })\n    }\n\n    render() {\n        // Create the list of ConfigItem objects\n        const configurationList = this.state.configurations.map(configuration => (\n            <ConfigItem\n                key={`cfi-${configuration._id}`}\n                platform={configuration.configuration.frontPageURL}\n                timestamp={configuration._id.getTimestamp()}\n                sendConfig={() => { this.sendConfig(configuration) }}\n                deleteConfig={() => { this.deleteConfig(configuration) }}\n            />\n        ))\n\n        return (\n            <div className=\"StartScreen\" color=\"inherit\">\n                <div className=\"ConfigList\">\n\n                    {/* Render ConfigItem objects */}\n                    {configurationList.length === 0 \n                        ? <div>No configurations could be found in the database</div>\n                        : configurationList\n                    }\n\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default ConfigurationSelection;"]},"metadata":{},"sourceType":"module"}